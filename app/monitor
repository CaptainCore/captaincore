#!/bin/bash

#
#   Monitor check
#
#   `captaincore monitor`
#
#   [<site>...]
#   One or more sites to check.
#
#   [--all]
#   Checks all sites.
#
#   [--parallel=<number-of-checks>]
#   Number of moniter checks to run at same time
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}lib/arguments

user_agent="captaincore/1.0 (CaptainCore Health Check by CaptaionCore.io)"

run_command () {
if [ $# -gt 0 ]; then

	output=()

	for website in "$@"; do

		# Load site configs
		home_url=$(captaincore site get $website --field=home_url)
		if [[ "$home_url" != "" ]]; then
			response=$(curl -A "$user_agent" --write-out %{http_code} --silent --output /dev/null $home_url)
			echo "Response code $response for $home_url"
		else
			echo "Skipping $website, WordPress home url not found"
		fi
		#if [[ "$response" != "200" ]]; then
			# Compares $home_url IP with $address IP. If different then send email showing the difference

			# Adds $domain and $repsonse to new array
			output+="Response code $response for $home_url"
		#fi

		#	#send email
		# output "Response code $response for $address" per each item in array
		#	#echo "$output" | mutt -e 'set content_type=text/html' -s "Monitor: 3 errors" -- $captaincore_admin_email

	done

	# Send 1 email for entire check

fi
}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ]; then
  # Runs on specific sites
  run_command ${arguments[*]}
fi

if [[ $all == "true" ]] && [[ "$parallel" -gt "0" ]]; then
  # Runs on all sites
	all_sites=(${websites[@]})
	site_count=${#all_sites[*]}
  echo "Running monitor check ${#all_sites[*]} sites"
	parallel_sets=$(($site_count / $parallel))
	for parallel_set in `seq 1 $parallel_sets`; do

		set_needed=$(( $parallel_set *  $parallel ))

		if [[ "$set_needed" -lt "$site_count" ]]; then

			current_parallel=$(($parallel_set * $parallel))
			last_parallel=$(($current_parallel + $parallel - 1))

			for i in `seq $current_parallel $last_parallel`; do
					if [[ "$i" -lt "$site_count" ]]; then
						run_command ${all_sites[$i]} &
					fi
			done

			wait

		fi

	done
elif [[ $all == "true" ]]; then
	all_sites=(${websites[@]})
	site_count=${#all_sites[*]}
	echo "Running monitor check $site_count sites"
	# Runs on all sites
	run_command ${websites[@]}
fi

# Error if no sites specifed
if [[ $all != "true" ]] && [ ${#arguments[*]} -eq 0 ]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify one or more sites, or use --all."
fi
