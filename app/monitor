#!/usr/bin/env bash

#
#   Monitor check
#
#   `captaincore monitor`
#
#   [<site>...]
#   One or more sites to check.
#
#   [--all]
#   Checks all sites.
#
#   [--parallel=<number-of-checks>]
#   Number of moniter checks to run at same time. Defaults to 15.
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}lib/arguments

run_command() {

  # Assign default parallel if needed
  if [[ $parallel == "" ]]; then
    parallel=15
  fi

  # See if any sites are specifed
  if [ ${#arguments[*]} -gt 0 ]; then
    urls_to_check=()
    # Runs on specific sites
    for site in ${arguments[*]}; do
      urls_to_check+=( $( captaincore site get $site --field=home_url ) )
    done
    urls_to_check=${urls_to_check[@]}
  fi

  if [[ $all == "true" ]]; then
    # Runs on all sites
    urls_to_check=$(captaincore site list --field=home_url)
  fi

  # Error if no sites specifed
  if [[ $all != "true" ]] && [ ${#arguments[*]} -eq 0 ]; then
    echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify one or more sites, or use --all."
    return 1
  fi

  # Generate random auth
  auth=''; for count in {0..6}; do auth+=$(printf "%x" $(($RANDOM%16)) ); done;

  # Begin time tracking
  overalltimebegin=$(date +"%s")
  backup_date=$(date +'%Y-%m-%d')
  backup_time=$(date +'%H-%M')

  # Define log file format
  log_file=$logs/${backup_date}_${backup_time}_$auth.txt
  echo "logging to $log_file"

  # Run checks in parallel. Collect the results in log file.
  ( echo $urls_to_check | xargs -P $parallel -n 1 captaincore monitor-check ) 2>&1 | tee $log_file

  echo "Finished checks now building email if needed"

  # Have local PHP handle error count
  cd ${root_path}data
  error_count=$(wp eval-file ${root_path}lib/local-scripts/monitor-error-count.php $log_file --skip-wordpress)

  # Send email if needed
  if [[ $error_count != "0" ]]; then

    # Build emails
    email_content=$(wp eval-file ${root_path}lib/local-scripts/monitor-generate-email.php $log_file --skip-wordpress)

    echo "Sending Email"

    # output "Response code $response for $address" per each item in array
    echo $email_content | mutt -e 'set content_type=text/html' -s "Monitor: $error_count errors" -- $captaincore_admin_email

  fi

  return 1

}
run_command
