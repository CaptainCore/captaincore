#!/usr/bin/env bash

#
#   Backups a single site.
#
#   `captaincore backup-runner <site>`
#
#   Used by `captaincore backup`. Not to be used directly.
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

run_command() {

    site=$@

    # Extract environment
    if [[ "$site" == *"-staging"* ]]; then
      environment=staging
    fi

    if [[ "$site" == *"-production"* ]]; then
      environment=production
    fi

    if [[ "$site" != *"-"* ]]; then
      environment=production
    fi

    # Load site configs
    while read site_configs; do if [[ $site_configs == "" ]]; then continue; fi; declare "$site_configs"; done <<< "$(captaincore site get $site --bash --captain_id=$captain_id)"

    # Site found, start the backup
    if [[ $domain == "" ]]; then
      echo "Error: $site missing domain. Skipping backup."
      exit
    fi

    # Append trailing slash if home_directory exist
    if [ "$home_directory" != "" ]; then
      home_directory="${home_directory}/"
    fi

    # Define Rclone site name
    rclone_site_name=${captain_id}-${site}-${environment}

    # Lookup rclone
    remotes=$( rclone listremotes )

    # Check for rclone remote
    rclone_remote_lookup=false
    for item in ${remotes[@]}; do
      if [[ sftp-${rclone_site_name}: == "$item" ]]; then
        rclone_remote_lookup=true
      fi
    done

    if [[ $rclone_remote_lookup == false ]]; then
      echo "$(date +'%Y-%m-%d %H:%M') Generating rclone configs for $site"
      captaincore site rclone-configs $site --captain_id=$captain_id
    fi

    # Captures FTP errors in $ftp_output and file listing to log file
    ftp_output=$( { rclone lsd sftp-${rclone_site_name}:$home_directory ; } 2>&1 )
    ftp_search_for_wordpress=$( echo "$ftp_output" | perl -wnE'say for /wp-admin/g' )

    # Handle FTP errors
    if [[ $ftp_search_for_wordpress != "wp-admin" ]]; then
      wordpress_not_found=true
    fi

    # Incremental backup locally with rclone
    echo "$(date +'%Y-%m-%d %H:%M') Begin incremental backup ${site}-${environment} to local"

    if [[ $skip_db != true ]] && [[ $wordpress_not_found != true ]]; then

      # Database backup if remote server supports
      if [[ "$provider" == "kinsta" ]] || [[ "$provider" == "wpengine" ]]; then
        captaincore ssh ${site}-${environment} --script="db-backup" --captain_id=$captain_id
      fi

      if [[ "$provider" == "wpengine" ]]; then
        rclone sync sftp-${rclone_site_name}:_wpeprivate/database-backup.sql $path/${site}_${site_id}/${environment}/backup/
      fi
      if [[ "$provider" == "kinsta" ]]; then
        rclone sync sftp-${rclone_site_name}:private/database-backup.sql $path/${site}_${site_id}/${environment}/backup/
      fi

    fi

    # Backup site locally
    if [[ "$wp_content" != "wp-content" ]]; then
      echo "$(date +'%Y-%m-%d %H:%M') Backing up ${site}-${environment} alternative wp-content location ($wp_content)"
      rclone sync sftp-${rclone_site_name}:$home_directory $path/${site}_${site_id}/${environment}/backup/ --exclude-from="${root_path}lib/excludes" --filter="+ $wp_content/**" --filter="- wp-content/**" --filter="- content/**"
    else
      rclone sync sftp-${rclone_site_name}:$home_directory $path/${site}_${site_id}/${environment}/backup/ --exclude-from="${root_path}lib/excludes" --filter="- content/**"
    fi
   
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
      # Begin folder size in bytes without apparent-size flag
      folder_size=$( du -s --block-size=1 $path/${site}_${site_id}/${environment}/backup/ )
      folder_size=$( echo $folder_size | cut -d' ' -f 1 )
    fi

    if [[ "$OSTYPE" == "darwin"* ]]; then
      # Calculate folder size in bytes http://superuser.com/questions/22460/how-do-i-get-the-size-of-a-linux-or-mac-os-x-directory-from-the-command-line
      folder_size=$( find $path/${site}_${site_id}/${environment}/backup/ -type f -print0 | xargs -0 stat -f%z | awk '{b+=$1} END {print b}' )
    fi

    if [[ $skip_remote != true ]]; then
      # Incremental backup upload to Restic
      echo "$(date +'%Y-%m-%d %H:%M') Storing $site to backup archive"
      if [[ $( restic snapshots --repo rclone:$rclone_backup/${site}_${site_id}/${environment}/restic-repo --password-file="${root_path}data/restic.key" ) == "" ]]; then
        echo "Generating restic repo for $site"
        restic init --quiet --repo rclone:$rclone_backup/${site}_${site_id}/${environment}/restic-repo --password-file="${root_path}data/restic.key"
      fi
      cd $path/${site}_${site_id}/${environment}/backup/
      restic backup . --quiet --repo rclone:$rclone_backup/${site}_${site_id}/${environment}/restic-repo --exclude-file="${root_path}lib/restic-excludes" --password-file="${root_path}data/restic.key"
      captaincore site backup list-generate ${site}-${environment} --captain_id=$captain_id
      captaincore site backup get-generate ${site}-${environment} --captain_id=$captain_id
    fi

    captaincore usage-update ${site}-${environment} --captain_id=$captain_id

    echo -n "." >> ${root_path}data/process-${process_id}-progress.log

}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ]; then
  # Runs on specifed sites
  run_command ${arguments[*]}
fi
