#!/usr/bin/env bash

#
#   Generates rclone configs based on site credentials
#
#   `captaincore rclone-configs <site>`
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}lib/arguments

site=$1

run_command() {

  # Load site vars
  eval $(captaincore site get $site --bash)

  # Domain not found
  if [[ $domain == "" ]]; then
    echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Domain not found."
    return
  fi

  # Remove if already found
  rclone config delete sftp-$site
  rclone config delete sftp-$site-staging

  echo "$(date +'%Y-%m-%d %H:%M') Generating rclone configs for $site"

  password=$(captaincore site get ${site}@${provider} --field=password)
  password_staging=$(captaincore site get ${site}@${provider} --field=password_staging)

  # Add new WordPress site to Rclone
  rclone_pass=$(rclone obscure $password)
  rclone config create sftp-$site $protocol host $address user $username port $port pass $rclone_pass

  if [[ "$password_staging" != "" ]]; then
    rclone_pass_staging=$(rclone obscure $password_staging)
    rclone config create sftp-$site-staging $protocol_staging host $address_staging user $username_staging port $port_staging pass $rclone_pass_staging
  fi

}
run_command
