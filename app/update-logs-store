#!/bin/bash

#
#   Stores update logs to CaptainCore API
#
#   `captaincore update-log-import`
#
#   [<site>...]
#   One or more sites.
#
#   [--all]
#   Stores update log data for all sites.
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}lib/arguments

run_command() {

	INDEX=1
	for website in "$@"; do

		# Load site configs
		eval $(captaincore site get $website --bash)

		# Site found, start the backup
		if [[ $site_id != "" ]] && [[ $site != "" ]]; then

			echo "${INDEX}/$# - $domain"

			response=$(captaincore update-fetch $site)

			if [[ "$debug" == "true" ]]; then
				echo "$captaincore_api?core=$core_version&plugins=$plugin_data&themes=$theme_data&users=$user_data&token=$token"
				continue
			fi


			if [[ "$captaincore_dev" == true ]]; then
				curl_argument="-k "
			fi

			# Adds sync data to CaptainCore GUI
			curl ${curl_argument}--request POST "$captaincore_api" --header "Content-Type: application/json" --data @- << EOF
{
	"command": "import-update-log",
	"site_id":"$site_id",
	"token":"$token",
	"data":$response
}
EOF

		fi

		# Clear out variables
		site=''
		site_id=''
		domain=''
		username=''
		password=''
		address=''
		protocol=''
		port=''
		homedir=''
		remoteserver=''
    s3bucket=''
    s3path=''
    subsite=''

		let INDEX=${INDEX}+1
	done

}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ]; then
  # Runs on specific sites
  run_command ${arguments[*]}
fi

if [[ $all == "true" ]]; then
  # Runs on all sites
  echo "Sync website data on all sites"
	run_command ${websites[@]}
fi

# Error if no sites specifed
if [[ $all != "true" ]] && [ ${#arguments[*]} -eq 0 ]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify one or more sites, or use --all."
fi
