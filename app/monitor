#!/usr/bin/env bash

#
#   Monitor check
#
#   `captaincore monitor`
#
#   [<site>...]
#   One or more sites to check.
#
#   [--all]
#   Checks all sites.
#
#   [--parallel=<number-of-checks>]
#   Number of moniter checks to run at same time. Defaults to 15.
#
#   [--page=<page-url>]
#   Check a specific page. Example `--page=/wp-admin/`. Defaults to home page.
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}lib/arguments

run_command() {

  urls_to_check=()

  # Assign default parallel if needed
  if [[ $parallel == "" ]]; then
    parallel=15
  fi

  # See if any sites are specifed
  if [ ${#arguments[*]} -gt 0 ]; then
    # Runs on specific sites
    for site in ${arguments[*]}; do
      url=$( captaincore site get $site --field=home_url )
      urls_to_check+=( ${url}${page} )
    done
    urls_to_check=${urls_to_check[@]}
  fi

  if [[ $all == "true" ]]; then
    # Runs on all sites
    urls=$(captaincore site list --field=home_url)
    for url in ${urls[*]}; do
      urls_to_check+=( ${url}${page} )
    done
    urls_to_check=${urls_to_check[@]}
  fi

  # Error if no sites specifed
  if [[ $all != "true" ]] && [ ${#arguments[*]} -eq 0 ]; then
    echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify one or more sites, or use --all."
    return 1
  fi

  # Generate random auth
  auth=''; for count in {0..6}; do auth+=$(printf "%x" $(($RANDOM%16)) ); done;

  # Begin time tracking
  overalltimebegin=$(date +"%s")
  backup_date=$(date +'%Y-%m-%d')
  backup_time=$(date +'%H-%M')

  # Define log file format
  log_file=$logs/${backup_date}_${backup_time}_$auth.txt
  echo "logging to $log_file"

  # Run checks in parallel. Collect the results in log file.
  ( echo $urls_to_check | xargs -P $parallel -n 1 captaincore monitor-check ) 2>&1 | tee $log_file

  echo "Finished checks now building email if needed"

  # Have local PHP handle error count
  cd ${root_path}data
  error_count=$(wp eval-file ${root_path}lib/local-scripts/monitor-error-count.php $log_file --skip-wordpress)

  # If no errors then stop here
  if [[ $error_count == "0" ]]; then
    return 1
  fi

  echo "Found $error_count errors. Checking those URLs again."

  # Fetch urls with errors for another another check
  urls_to_check=$(wp eval-file ${root_path}lib/local-scripts/monitor-fetch-errors-and-clean.php $log_file --skip-wordpress)

  # Runs checks in parallel (errors only). Append results to log file.
  ( echo $urls_to_check | xargs -P $parallel -n 1 captaincore monitor-check ) 2>&1 | tee -a $log_file

  error_count=$(wp eval-file ${root_path}lib/local-scripts/monitor-error-count.php $log_file --skip-wordpress)

  # If no errors then stop here
  if [[ $error_count == "0" ]]; then
    return 1
  fi

  echo "Found $error_count errors. Building email."

  # Build emails
  email_content=$(wp eval-file ${root_path}lib/local-scripts/monitor-generate-email.php $log_file --skip-wordpress)

  echo "Sending Email"

  # output "Response code $response for $address" per each item in array
  echo $email_content | mutt -e 'set content_type=text/html' -s "Monitor: $error_count errors" -- $captaincore_admin_email

}
run_command
