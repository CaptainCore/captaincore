#!/usr/bin/env bash

#
#   Initializes site
#
#   `captaincore deploy init <site>`
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}lib/arguments

run_command() {

  if [ $# -gt 0 ]; then

    echo "Run init on $# sites"
    INDEX=1
    for website in "$@"; do

      # Load site configs
      eval $(captaincore site get $website --bash)

      # Site found, start the backup
      if ! [ -z "$domain" ]; then

        # captures FTP errors in $ftp_output and file listing within file called ftp_ls
        ftp_output=$( { rclone lsd sftp-$site:$homedir ; } 2>&1 )
        ftp_search_for_wordpress=`echo "$ftp_output" | perl -wnE'say for /wp-admin/g'`

        # Handle FTP errors
        if [ $ftp_search_for_wordpress != "wp-admin" ]; then
          ## Add FTP error to log file
          echo "FTP response: $site ($ftp_output)"
        else

          # Append trailing slash if homedir exist
          if [ "$homedir" != "" ]; then
            homedir="${homedir}/"
          fi

          # Pull down wp-config.php and .htaccess
          rclone copy sftp-$site:${homedir}wp-config.php $path/${site}_${site_id}/backup/
          rclone copy sftp-$site:${homedir}.htaccess $path/${site}_${site_id}/backup/

          # load custom configs into wp-config.php and .htaccess
          captaincore get configs --wpconfig=$path/${site}_${site_id}/backup/wp-config.php --htaccess=$path/${site}_${site_id}/backup/.htaccess --domain=$domain
          sleep 1s

          # Push up modified wp-config.php and .htaccess
          rclone copy $path/${site}_${site_id}/backup/wp-config.php sftp-$site:${homedir}
          rclone copy $path/${site}_${site_id}/backup/.htaccess sftp-$site:${homedir}

          # Generate token
          token_key=$(captaincore get token $site)

          # Assign token and backup link
          curl --request POST "$captaincore_api" --header "Content-Type: application/json" --data @- << EOF
{
	"command":"token",
	"site_id":"$site_id",
	"token_key":"$token_key",
	"token":"$token"
}
EOF
					# Set permalink to 'Post name' format
					captaincore ssh $site --script=rewrite-prep

        fi

      fi

      ### Clear out variables
      domain=''
      username=''
      password=''
      address=''
      protocol=''
      port=''
      homedir=''
      remoteserver=''

      let INDEX=${INDEX}+1
    done

  fi
}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ]; then
  # Runs on specifed sites
  run_command ${arguments[*]}
else
  # Runs on all sites
  run_command ${websites[@]}
fi
