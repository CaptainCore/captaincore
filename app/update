#!/usr/bin/env bash

#
#   Updates themes/plugins on WordPress sites
#
#   `captaincore update`
#
#   [<site>...]
#   One or more sites to update.
#
#   [--all]
#    Updates all sites.
#
#   [--updates-enabled]
#   Updates all sites marked for automatic updates
#
#   [--exclude-themes=<themes>]
#   Passed onto `wp theme update --exclude=<theme-names>`
#
#   [--exclude-plugins=<plugins>]
#   Passed onto `wp plugin update --exclude=<theme-names>`
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

run_command() {

    # Begin time tracking
    overalltimebegin=$(date +"%s")
    backup_date=$(date +'%Y-%m-%d')
    backup_time=$(date +'%H-%M')

    # Begin logging
    echo "$(date +'%Y-%m-%d %H:%M') Begin updates"

    echo "Updating $# sites"
    INDEX=1
    for website in "$@"; do

    	# Extract environment
      if [[ "$website" == *"-staging"* ]]; then
        environment=staging
      else
        environment=production
      fi

      # Load site configs
      while read site_configs; do declare "$site_configs"; done <<< "$(captaincore site get $website --bash --captain_id=$captain_id)"

      # captures FTP errors in $ftp_output and file listing to log file
      ftp_output=$( { rclone lsd sftp-$site:$home_directory ; } 2>&1 )
      ftp_search_for_wordpress=`echo "$ftp_output" | perl -wnE'say for /wp-admin/g'`

      # Handle FTP errors
      if [[ $ftp_search_for_wordpress != "wp-admin" ]]; then

        # WordPress not found, so performing regular backup
        echo "WordPress not found: $site ($ftp_output)"
				continue

      fi

      # No errors found, run updates

      # run updates
      echo "$(date +'%Y-%m-%d %H:%M') Begin updates on $site (${INDEX}/$#)"

      # Define log file format
			logs_path=$path/${site}_${site_id}/${environment}/updates/

			# Generate log folder
			mkdir -p $logs_path

      if [[ "$environment" == "staging" ]]; then
        site=${site}-staging
      fi

			# Exclude themes or plugins if marked for exclusion
			if [[ $updates_exclude_themes != "" ]] && [[ $updates_exclude_plugins != "" ]]; then
				json_output=$(captaincore ssh $site --script=update --exclude_plugins=$updates_exclude_plugins --exclude_themes=$updates_exclude_themes --all --format=json --captain_id=$captain_id)
			elif [[ $updates_exclude_themes != "" ]]; then
				json_output=$(captaincore ssh $site --script=update --exclude_themes=$updates_exclude_themes --all --format=json --captain_id=$captain_id)
			elif [[ $updates_exclude_plugins != "" ]]; then
				json_output=$(captaincore ssh $site --script=update --exclude_plugins=$updates_exclude_plugins --all --format=json --captain_id=$captain_id)
			else
				json_output=$(captaincore ssh $site --script=update --all --format=json --captain_id=$captain_id)
			fi

			# If json output detected then parse updates
			if [[ "$json_output" = *"[{"* ]]; then

				IFS=$'\n' read -rd '' -a response_parsed <<<"$json_output"
				echo "theme updates ${response_parsed[0]}"
				echo "plugin updates ${response_parsed[1]}"

				if [[ "$captaincore_dev" == true ]]; then
					curl_argument="-k "
				fi

				# Generate theme json if themes updated
				if [[ "${response_parsed[0]}" = *"[{"* ]]; then

					echo "Writing theme updates to file"
					date=$(date +'%Y-%m-%d-%H%M%S')
					file="${logs_path}/${date}-themes.json"
					echo ${response_parsed[0]} > $file
					json="[{\"date\":\"$date\",\"type\":\"theme\",\"updates\":$(cat $file)}]";

					# Adds sync data to CaptainCore GUI
					curl ${curl_argument}--request POST "$captaincore_api" --header "Content-Type: application/json" --data @- << EOF
{
"command":"import-update-log",
"environment":"$environment",
"site_id":"$site_id",
"token":"$token",
"data":$json
}
EOF

			  fi

				# Generate plugin json if plugins updated
				if [[ "${response_parsed[1]}" = *"[{"* ]]; then
					echo "Writing plugin updates to file"
					date=$(date +'%Y-%m-%d-%H%M%S')
					file="${logs_path}/${date}-plugins.json"
					echo ${response_parsed[1]} > $file
					json="[{\"date\":\"$date\",\"type\":\"plugin\",\"updates\":$(cat $file)}]";

					# Adds sync data to CaptainCore GUI
					curl ${curl_argument}--request POST "$captaincore_api" --header "Content-Type: application/json" --data @- << EOF
{
"command":"import-update-log",
"environment":"$environment",
"site_id":"$site_id",
"token":"$token",
"data":$json
}
EOF

      		fi

      	fi

      # Clear out variables
			exclude_themes=''
			exclude_plugins=''
      domain=''
      site=''
      username=''
      password=''
      address=''
      protocol=''
      port=''
      home_directory=''
      remoteserver=''
      s3bucket=''
      s3path=''
      subsite=''

      let INDEX=${INDEX}+1
    done

    echo "$(date +'%Y-%m-%d %H:%M') Updates finished"

    # End time tracking
    overalltimeend=$(date +"%s")
    diff=$(($overalltimeend-$overalltimebegin))
    echo "$(date +'%Y-%m-%d %H:%M') $(($diff / 3600)) hours, $((($diff / 60) % 60)) minutes and $(($diff % 60)) seconds elapsed."

}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ]; then
  # Runs on specifed sites
  run_command ${arguments[*]}
fi

if [[ $all == "true" ]]; then
  # Runs on all sites
	run_command ${websites[@]}
fi

if [[ $updates_enabled == "true" ]]; then
  # Runs on all sites
	run_command $(captaincore site list --updates-enabled --captain_id=$captain_id)
fi

# Error if no sites specifed
if [[ $all != "true" ]] && [[ $updates_enabled != "true" ]] && [ ${#arguments[*]} -eq 0 ]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify one or more sites, or use --all."
fi
