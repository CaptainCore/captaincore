#! /usr/bin/env php
<?php

#
#   Fetch yearly average stats
#
#   `captaincore stats-fetch <domain> <provider>`
#
#   [<provider>] (wordpress|fathom)
#   Supports WordPress.com stats or selfhosted Fathom. Defaults to WordPress.
#

parse_str( implode( '&', array_slice( $argv, 1 ) ), $_GET );

# Defaults
$captain_id = $_GET['--captain_id'];
$domain     = "";
$provider   = "wordpress";

if (isset($argv[1])) { 
    $domain = $argv[1]; 
}
if (isset($argv[2]) && $argv[2] == "wordpress" || $argv[2] == "fathom") { 
    $provider = $argv[2]; 
}

if ( $domain and $provider == "fathom" ) {

    // Extracts db info from local .env file
    $file = $_SERVER['HOME'] . '/.env';
    if ( file_exists( $file ) ) {

        $file = file_get_contents( $file );
        // Matches config keys and values
        $pattern = '/(.+)=\"(.+)\"/';
        preg_match_all( $pattern, $file, $matches );

    }
    $FATHOM_DATABASE_NAME     = $matches[2][ array_search( 'FATHOM_DATABASE_NAME', $matches[1] ) ];
    $FATHOM_DATABASE_USER     = $matches[2][ array_search( 'FATHOM_DATABASE_USER', $matches[1] ) ];
    $FATHOM_DATABASE_PASSWORD = $matches[2][ array_search( 'FATHOM_DATABASE_PASSWORD', $matches[1] ) ];

    try {
        $pdo = new PDO("mysql:host=127.0.0.1;dbname=${FATHOM_DATABASE_NAME}", $FATHOM_DATABASE_USER, $FATHOM_DATABASE_PASSWORD );
    } catch ( PDOException $e ) {
        die( $e->getMessage() );
    }

    $statement = $pdo->prepare("select id from sites where name = ?");
    $statement->execute([$domain]);
    $site = $statement->fetch();

    // Bail if site not found
    if ( ! $site ) {
        return true;
    }
    
    $site_id = $site["id"];

    // Prepare timestamp for query ending at the beginning of current month
    $timestamp = date('Y') . "-" . date('m') . '-01 04:00:00';

    $sql = "SELECT sum(pageviews) as pageviews,
    sum(visitors) as visitors,
    CONVERT_TZ(ts,'+00:00','-05:00') as tsOffset,
    month(ts),
    year(ts)
    FROM site_stats
    WHERE ts <= '$timestamp' AND site_id = $site_id
    GROUP BY month(tsOffset), year(tsOffset)
    ORDER BY tsOffset DESC
    LIMIT 12";

    $statement = $pdo->prepare($sql);
    $statement->execute();
    $stats = $statement->fetchAll();

    // Bail if stats not found
    if ( ! $stats ) {
        return true;
    }

    $month_count = count($stats);
    $total_pageviews = array_sum(array_column($stats,'pageviews'));
    $monthly_average_pageviews = round($total_pageviews / $month_count);
    $yearly_average_pageviews = $monthly_average_pageviews * 12;

    // Return yearly average pageviews
    if ($yearly_average_pageviews > 0 ) {
        echo $yearly_average_pageviews;
    } else {
        echo '0';
    }

}

if ( $domain and $provider == "wordpress" ) {

    // Loads CLI configs
    $json = $_SERVER['HOME'] . '/.captaincore-cli/config.json';

    if ( ! file_exists( $json ) ) {
        return;
    }

    $config_data = json_decode ( file_get_contents( $json ) );
    $system = $config_data[0]->system;

    foreach($config_data as $config) {
        if ( isset( $config->captain_id ) and $config->captain_id == $captain_id ) {
            $configuration = $config;
            break;
        }
    }

    // Connects to WordPress.com and pulls blog ids
    $access_key = $configuration->keys->access_key;

    if ( $domain ) {

        // Define vars
        $count  = 0;
        $total  = 0;
        $months = '';

        // Pull stats from WordPress API
        $curl = curl_init( 'https://public-api.wordpress.com/rest/v1/sites/' . $domain . '/stats/visits?unit=month&quantity=12' );
        curl_setopt( $curl, CURLOPT_HTTPHEADER, array( 'Authorization: Bearer ' . $access_key ) );
        curl_setopt( $curl, CURLOPT_RETURNTRANSFER, 1 );
        $response = curl_exec( $curl );
        $stats    = json_decode( $response, true );

        if ( isset( $stats['error'] ) and $stats['error'] == 'unknown_blog' ) {
            // Attempt to load www version
            // Pull stats from WordPress API
            $curl = curl_init( 'https://public-api.wordpress.com/rest/v1/sites/www.' . $domain . '/stats/visits?unit=month&quantity=12' );
            curl_setopt( $curl, CURLOPT_HTTPHEADER, array( 'Authorization: Bearer ' . $access_key ) );
            curl_setopt( $curl, CURLOPT_RETURNTRANSFER, 1 );
            $response = curl_exec( $curl );
            $stats    = json_decode( $response, true );

        }

        if ( isset( $stats['data'] ) ) {

            // Preps views for last 12 months for html output while calculating usage.
            foreach ( $stats['data'] as $stat ) {
                if ( $stat[0] ) {
                    $total   = $total + 1;
                    $months .= $stat[0] . ' - ' . $stat[1] . '<br />';
                }
                $count = $count + $stat[1];
            }

            if ( $total == 0 ) {
                $monthly_average = 0;
            } else {
                $monthly_average = round( $count / $total );
            }

            $yearly_estimate = $monthly_average * 12;
            echo $yearly_estimate;

        } else {
            // Error so return 0. For debug info see print_r($stats);
            echo '0';
        }
    }
}