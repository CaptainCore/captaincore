#!/usr/bin/env bash

#
#   Generates rclone configs based on site credentials
#
#   `captaincore site rclone-configs <site>`
#

while read config; do
  if [[ "$config" == "Error:"* ]]; then
    continue
  fi
  declare "$config"
done <<< "$(php ${CAPTAINCORE_PATH}/lib/local-scripts/configs.php fetch)"

run_command() {

  site=$1

  # Load site vars
  while read site_configs; do if [[ $site_configs == "" ]]; then continue; fi; declare "$site_configs"; done <<< "$(captaincore site get $site --bash --captain-id=$CAPTAIN_ID)"

  # Domain not found
  if [[ $domain == "" ]]; then
    echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Domain not found."
    return
  fi

  rclone_config_file="$path/${site}_${site_id}/rclone.conf"
  mkdir -p "$path/${site}_${site_id}/"
  echo "" > "$rclone_config_file"

  environments=( $( captaincore environment list $site --captain-id=$CAPTAIN_ID ) )

  for environment in ${environments[@]}; do

    while read site_configs; do if [[ $site_configs == "" ]]; then continue; fi; declare "$site_configs"; done <<< "$(captaincore site get $site-$environment --bash --captain-id=$CAPTAIN_ID)"

    if [[ "$key" != "use_password" ]]; then
      if [[ $key == "" ]]; then
        key=$( captaincore configuration get --field=default_key )
      fi
      ssh_file="$path_keys/${CAPTAIN_ID}/${key}"
      echo "Generating rclone configs for ${site}-${environment} with SSH key"
      quiet=$( rclone config create $environment $protocol host $address user $username port $port key_file $ssh_file --config="$rclone_config_file" )
    fi

    if [[ "$key" == "use_password" ]]; then
      password=$( captaincore site get ${site}-${environment} --field=password --captain-id=$CAPTAIN_ID )
      rclone_pass=$( rclone obscure $password )
      echo "Generating rclone configs for ${site}-${environment} with password"
      quiet=$( rclone config create $environment $protocol host $address user $username port $port pass --config="$rclone_config_file" -- $rclone_pass )
    fi

  done

}

run_command $1