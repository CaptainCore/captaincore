#!/bin/bash

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source $root_path/config

# Loop through arguments and seperate regular arguments from flags (--flag)
for var in "$@"
do
	# If starts with "--" then assign it to a flag array
    if [[ $var == --* ]]
    then
    	count=1+${#flags[*]}
    	flags[$count]=$var
    # Else assign to an arguments array
    else
    	count=1+${#arguments[*]}
    	arguments[$count]=$var
    fi
done

# Loop through flags and assign to varible. A flag "--skip-dropbox" becomes $flag_skip_dropbox
for i in "${!flags[@]}"
do

	# replace "-" with "_" and remove leading "--"
	flag_name=`echo ${flags[$i]} | tr - _`
	flag_name=`echo $flag_name | cut -c 3-`

	# assigns to $flag_flagname
	declare "flag_$flag_name"=true

done

backup_install () {
if [ $# -gt 0 ]; then

	echo "Backing up $# installs"
	INDEX=1
	for website in "$@"
	do

		### Load FTP credentials
		source $root_path/logins

		### Credentials found, start the backup
		if ! [ -z "$domain" ]
		then

			if [ "$homedir" == "" ]
			then
			   	homedir="/"
			fi

			# captures FTP errors in $ftp_output and file listing within file called ftp_ls
      ftp_output=$( { rclone lsd sftp-$website:$homedir ; } 2>&1 )
      ftp_search_for_wordpress=`echo "$ftp_output" | perl -wnE'say for /wp-admin/g'`

			# Handle FTP errors
			if [ $ftp_search_for_wordpress != "wp-admin" ]; then
				## Add FTP error to log file
				echo "FTP response: $website ($ftp_output)"
			else

				### Pull down wp-config.php and .htaccess
        rclone copy sftp-$website:$homedir/wp-config.php $path/$domain/
        rclone copy sftp-$website:$homedir/.htaccess $path/$domain/

				## load custom configs into wp-config.php and .htaccess
				captaincore get configs --wpconfig=$path/$domain/wp-config.php --htaccess=$path/$domain/.htaccess
				sleep 1s

				### Push up modified wp-config.php and .htaccess
        rclone copy $path/$domain/wp-config.php sftp-$website:$homedir/
        rclone copy $path/$domain/.htaccess sftp-$website:$homedir/

				### Generate token
				token_key=$(captaincore get token $domain)

				### Generate backup link
				# shareurl=`$path_scripts/Run/dropbox_uploader.sh share Backup/Sites/$domain`
				# shareurl=`echo $shareurl | grep -o 'https.*'`

				### Assign token and backup link
				curl --data-urlencode "git_commit=$git_hash" --data-urlencode "token=$token" --data-urlencode "token_key=$token_key" "$captaincore_api/$domain/"
				sleep 1s

			fi

		fi

		### Clear out variables
		domain=''
		username=''
		password=''
		ipAddress=''
		protocol=''
		port=''
		homedir=''
		remoteserver=''

		let INDEX=${INDEX}+1
	done

fi
}

### See if any specific sites are selected
if [ ${#arguments[*]} -gt 0 ]
then
	# Backup selected installs
	backup_install ${arguments[*]}
else
	# Backup all installs
	backup_install ${websites[@]}
fi
