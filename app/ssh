#!/bin/bash

##
##      SSH wrapper for Kinsta and WP Engine
##
##      Connects to individual install over SSH
##      captaincore ssh anchorhost1
##
##      Runs command over SSH
##      captaincore ssh anchorhost1 --command="wp plugin list"
##
##      Runs script over SSH
##      captaincore ssh anchorhost1 --script="~/Scripts/update_plugins"
##
##      Runs command over SSH to mutiple installs
##      captaincore ssh anchorhost1 anchorhost2 anchorhost3 --command="wp plugin list"
##

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source $root_path/config

# Loop through arguments and seperate regular arguments from flags (--flag)
for var in "$@"
do
	# If starts with "--" then assign it to a flag array
    if [[ $var == --* ]]
    then
    	count=1+${#flags[*]}
    	flags[$count]=$var
    # Else assign to an arguments array
    else
    	count=1+${#arguments[*]}
    	arguments[$count]=$var
    fi
done

# Loop through flags and assign to varible. A flag "--email=austin@anchor.host" becomes $email
for i in "${!flags[@]}"; do

	# replace "-" with "_" and remove leading "--"
	flag_name=`echo ${flags[$i]} | cut -c 3-`

	# detected flag contains data
	if [[ $flag_name == *"="* ]]; then
	  flag_value=`echo $flag_name | perl -n -e '/.+?=(.+)/&& print $1'` # extract value
	  flag_name=`echo $flag_name | perl -n -e '/(.+?)=.+/&& print $1'` # extract name
		flag_name=${flag_name/-/_}
	  declare "$flag_name"="$flag_value" # assigns to $flag_flagname
	else
	  # assigns to $flag_flagname boolen
	  declare "$flag_name"=true
	fi

done

ssh_wrapper () {
if [ $# -gt 0 ]; then

	#if [ -n "$script" ]; then
	#	echo "Running SSH command on $# installs"
	#fi
	#if [ -n "$command" ]; then
	#	echo "Running SSH command on $# installs"
	#fi

	for website in "$@"; do

		if [[ "$website" == *"-staging" ]]; then
			website=${website//-staging/}
			use_staging=true
		fi

		### Load FTP credentials
		eval $(captaincore site get $website --bash)

		if [[ "$address" == "" && "$captaincore_master" != "" ]]; then
			echo "Site $website not found. Attempting sync with master ($captaincore_master)."
			captaincore utils sync-with-master
			eval $(captaincore site get $website --bash)
		fi

		if [[ "$protocol" == "sftp" ]]; then

			## If website on Kinsta then connect SSH using their format
			if [[ "$address" == *".kinsta.com" ]]; then

				# Kinsta's command prep
				commandprep="cd public/ &&"

				# Kinsta ssh address format
				if [[ "$use_staging" != "true" ]]; then
				  remoteserver="-oStrictHostKeyChecking=no $username@$address -p $port"
				else
				  remoteserver="-oStrictHostKeyChecking=no $username_staging@$address_staging -p $port_staging"
				fi

			## If not Kinsta then try connecting using WP Engine's format
			elif [[ "$address" == *".wpengine.com" ]]; then

				# WP Engine command prep
				commandprep="rm ~/.wp-cli/config.yml; cd sites/* &&"

				# WP Engine ssh address format
		    remoteserver="-oStrictHostKeyChecking=no $wpe_ssh_user+$website@$website.ssh.wpengine.net"
			else
				echo "$domain website host provider not recognized"
		  fi

			# Runs ssh
			if [[ "$commandprep" != "" ]]; then
			if [ -n "$script" ]; then
				# Check for file
				if [ ! -f "$script" ]; then
					# Not found so attempt to run a local script
					script=$root_path/lib/ssh_scripts/$script
				fi
				ssh $remoteserver "$commandprep bash -s" < $script $script_args
			elif [ -n "$command" ]; then
				ssh $remoteserver "$commandprep $command"
			else
				ssh $remoteserver
			fi
			fi

		fi
		### Clear out variables
		domain=''
		username=''
		password=''
		address=''
		protocol=''
		port=''
		homedir=''
		remoteserver=''
		s3bucket=''
		s3path=''
		subsite=''
		unset use_staging

		let INDEX=${INDEX}+1
	done

fi
}

### See if any specific sites are selected
if [ ${#arguments[*]} -gt 0 ]; then
	# Backup selected installs
	ssh_wrapper ${arguments[*]}
else
	# Backup all installs
	ssh_wrapper ${websites[@]}
fi
