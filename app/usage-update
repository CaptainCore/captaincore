#!/usr/bin/env bash

#
#   Generates usage stats (Storage and Views) for CaptainCore GUI
#
#   `captaincore usage-update <site>...`
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

run_command() {

    echo "Generating usage stats for $# websites"
    INDEX=1
    for website in "$@"; do

    	# Extract environment
      if [[ "$website" == *"-staging"* ]]; then
        environment=staging
      else
        environment=production
      fi
      
      # Load site configs
      while read site_configs; do declare "$site_configs"; done <<< "$(captaincore site get $website --bash --captain_id=$captain_id)"

      # Site found, start the backup
      if ! [ -z "$domain" ]; then

        if [[ "$OSTYPE" == "linux-gnu" ]]; then
          # Begin folder size in bytes without apparent-size flag
          folder_size=`du -s --block-size=1 $path/${site}_${site_id}/${environment}/backup/`
          folder_size=`echo $folder_size | cut -d' ' -f 1`
        elif [[ "$OSTYPE" == "darwin"* ]]; then
          # Calculate folder size in bytes http://superuser.com/questions/22460/how-do-i-get-the-size-of-a-linux-or-mac-os-x-directory-from-the-command-line
          folder_size=`find $path/${site}_${site_id}/${environment}/backup/ -type f -print0 | xargs -0 stat -f%z | awk '{b+=$1} END {print b}'`
        fi

        # Views for yearly stats
        views=$( captaincore stats $site )

				# Debug API request
				if [[ "$debug" == "true" ]]; then
					read -r -d '' VAR << EOM
					{
						"command":"usage-update",
						"site_id":"$site_id",
						"storage":"$folder_size",
						"token":"$token",
						"views":"$views"
					}
EOM
					echo $VAR
					continue
				fi

        # Post folder size bytes and yearly views to ACF fields
        curl --request POST "$captaincore_api" --header "Content-Type: application/json" --data @- << EOF
{
	"command":"usage-update",
	"site_id":"$site_id",
	"storage":"$folder_size",
	"token":"$token",
	"views":"$views"
}
EOF
        echo "Generated $domain"
      fi

      ### Clear out variables
      domain=''
      username=''
      password=''
      address=''
      protocol=''
      port=''
      home_directory=''
      remoteserver=''
      s3bucket=''
      s3path=''
      subsite=''

      let INDEX=${INDEX}+1
    done

}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ]; then
  # Runs on specifed sites
  run_command ${arguments[*]}
else
  # Runs on all sites
  run_command ${websites[@]}
fi
