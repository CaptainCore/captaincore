#!/bin/bash

##
##      SSH wrapper for Kinsta and WP Engine
##
##      Connects to individual install over SSH
##      captaincore ssh anchorhost1
##
##      Runs command over SSH
##      captaincore ssh anchorhost1 "wp plugins list"
##

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source $root_path/config

website=$1
if [[ "$website" == *"-staging" ]]; then
  website=${website//-staging/}
  use_staging=true
fi

### Load FTP credentials
source $root_path/logins

### Credentials found, start the backup
if ! [ -z "$domain" ]
then

  ## If website on Kinsta then connect SSH using their format
  if [[ "$ipAddress" == *".kinsta.com" ]]; then

    if [[ "$use_staging" != "true" ]]; then
      remoteserver="-oStrictHostKeyChecking=no $username@$ipAddress -p $port"
    else
      remoteserver="-oStrictHostKeyChecking=no $staging_username@$staging_ipAddress -p $staging_port"
    fi
    if [ -n "$2" ]; then
      ssh $remoteserver "cd public/ && $2"
    else
      ssh $remoteserver
    fi

  else ## If not Kinsta then try connecting using WP Engine's format

    if [ -n "$2" ]; then
      ssh -oStrictHostKeyChecking=no $wpe_ssh_user+$1@$1.ssh.wpengine.net "rm ~/.wp-cli/config.yml; cd sites/* && $2"
    else
      ssh -oStrictHostKeyChecking=no $wpe_ssh_user+$1@$1.ssh.wpengine.net
    fi

  fi

else ## not recognized so attempt WP Engine's format

  if [ -n "$2" ]; then
    ssh -oStrictHostKeyChecking=no $wpe_ssh_user+$1@$1.ssh.wpengine.net "rm ~/.wp-cli/config.yml; cd sites/* && $2"
  else
    ssh -oStrictHostKeyChecking=no $wpe_ssh_user+$1@$1.ssh.wpengine.net
  fi

fi
