#!/usr/bin/env bash

#
#   SSH connection to one or more sites.
#
#   `captaincore ssh <site>`
#
#   [<site>...]
#   One or more sites.
#
#   [@<target>]
#   Target groups of sites like @all @production or @staging.
#
#   [--parallel=<number>]
#   Number of SSH connections at same time
#
#   [--command=<commands>]
#   Runs command over SSH
#
#   [--script=<name|script>] [--<script-argument-name>=<script-argument-value>]
#   Runs script over SSH
#
#   [--recipe=<recipe_id>
#   Runs script over SSH
#
#   [--debug]
#   Outputs SSH command for debug purposes
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

run_command() {
  
	site=$1
  before_ssh=""

	# Extract environment
	if [[ "$site" == *"-staging"* ]]; then
		environment=staging
	else
		environment=production
	fi

	# Load site configs
	while read site_configs; do if [[ $site_configs == "" ]]; then continue; fi; declare "$site_configs"; done <<< "$(captaincore site get $site --bash --captain_id=$captain_id)"

  if [ -f "${path}/process-${process_id}-progress.log" ]; then
    echo -n "." >> ${path}/process-${process_id}-progress.log
  fi

  if [[ "$address" == "" && "$captaincore_master" != "" ]]; then
    echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Site $site not found."
    exit
  fi

  if [[ "$protocol" != "sftp" ]]; then
    echo -e "${COLOR_RED}Error:${COLOR_NORMAL} SSH not supported (Protocol is $protocol)."
    exit
  fi

  if [[ "$provider" == "kinsta" && "$address" == "" ]]; then
    echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Missing Kinsta site."
    exit
  fi

  if [[ "$provider" == "wpengine" && "$environment" == "staging" ]]; then
    echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Missing WP Engine site."
    exit
  fi

  if [[ "$environment_vars" != "" ]]; then
    environment_vars="$environment_vars &&"
  fi

  remote_options="-oStrictHostKeyChecking=no"

  if [[ $key != 'use_password' ]]; then
    remote_options="$remote_options -oPreferredAuthentications=publickey"
  fi
  if [[ $key != 'use_password' ]]; then
    if [[ $key == "" ]]; then
      key=$( captaincore configuration get --field=default_key )
    fi
    remote_options="$remote_options -i $path_keys/${captain_id}/${key}"
  fi
  if [[ $key == 'use_password' ]]; then
      before_ssh="sshpass -p '$(captaincore site get $site --captain_id=$captain_id --field=password)'"
  fi

  # If website on Kinsta then prepare their format
  if [[ "$provider" == "kinsta" ]]; then

    # Kinsta's command prep
    command_prep="$environment_vars cd public/ &&"
    remote_server="$remote_options $username@$address -p $port"

    if [[ "$use_staging" == "true" ]]; then
      remote_server="$remote_options $username_staging@$address_staging -p $port_staging"
    fi

  fi

  # If website on WP Engine then prepare their format
  if [[ "$provider" == "wpengine" ]]; then

    command_prep="$environment_vars rm ~/.wp-cli/config.yml; cd sites/* &&"  
    remote_server="$remote_options ${site}@${site}.ssh.wpengine.net"

    if [[ "$use_staging" == "true" ]]; then
      remote_server="$remote_options ${site_staging}@${site_staging}.ssh.wpengine.net"
    fi

  fi

  if [[ "$remote_server" == "" ]]; then
    echo -e "${COLOR_RED}Error:${COLOR_NORMAL} $domain website host provider not recognized."
    exit
  fi

  if [[ "$command_prep" == "" ]]; then
    echo -e "${COLOR_RED}Error:${COLOR_NORMAL} $domain website host provider not recognized."
    exit

  fi

  # Runs ssh with recipe
  if [[ "$recipe" != "" ]]; then
    recipe_file="$path_recipes/${captain_id}-${recipe}.sh"
    # Check for file
    if [ -f "$recipe_file" ]; then
      # Pass all arguments found after --script=<script> argument into remote script
      $before_ssh ssh $remote_server "$command_prep bash -s -- --site=$site ${flags[@]}" < $recipe_file || captaincore site ssh-fail $site --captain_id=$captain_id
    fi
    exit
  fi

  # Runs ssh with script
  if [ -n "$script" ]; then
    # Check for file
    if [ -f "$script" ]; then
      # Pass all arguments found after --script=<script> argument into remote script
      $before_ssh ssh $remote_server "$command_prep bash -s -- --site=$site ${flags[@]}" < $script || captaincore site ssh-fail $site --captain_id=$captain_id
      exit
    fi

    # Not found so attempt to run a local script
    script_file=${root_path}lib/remote-scripts/$script
    if [ ! -f "$script_file" ]; then
      echo "Error: Can't locate script $script"
      exit
    fi

    $before_ssh ssh $remote_server "$command_prep bash -s -- --site=$site ${flags[@]}" < $script_file || captaincore site ssh-fail $site --captain_id=$captain_id
    exit
    
  fi

  # Runs ssh with command
  if [ -n "$command" ]; then
    $before_ssh ssh $remote_server "$command_prep $command" || captaincore site ssh-fail $site --captain_id=$captain_id
    exit
  fi

  if [[ "$direct" == "true" ]]; then
    $before_ssh ssh -T $remote_server || captaincore site ssh-fail $site --captain_id=$captain_id
    exit
  fi

  if [[ "$debug" == "true" ]]; then
    echo "$before_ssh ssh $remote_server"
  fi

  # Runs ssh
  $before_ssh ssh $remote_server

}

if [ ${#arguments[*]} -eq 0 ] && [ ${#targets[*]} -eq 0 ]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify one or more sites, or use a target @all, @production or @staging."
  exit
fi

if [ ${#arguments[*]} -eq 1 ] && [ ${#targets[*]} -eq 0 ]; then
  run_command ${arguments[*]}
fi

if [ ${#arguments[*]} -gt 1 ] && [ ${#targets[*]} -eq 0 ] && [[ "$command" == "" ]] && [[ "$script" == "" ]] && [[ "$recipe" == "" ]]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} For bulk sites please specify a [--command=<command>], [--script=<script>] or [--recipe=<recipe>]."
  exit
fi

if [ ${#arguments[*]} -gt 1 ] && [ ${#targets[*]} -eq 0 ]; then
  captaincore bulk ssh ${arguments[*]} "${flags[@]}" --captain_id=$captain_id
fi

if [ ${#targets[*]} -gt 0 ] && [ ${#arguments[*]} -eq 0 ]; then
  captaincore bulk ssh ${targets[*]/targets=/@} "${flags[@]}" --captain_id=$captain_id
fi