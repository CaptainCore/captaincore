#!/bin/bash

##
##      Deploy production to staging (Kinsta only)
##
##      Pass arguments from command line like this
##      captaincore deploy production-to-staging <site> --email=<email> [--skip-uploads]
##

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}/lib/arguments

deploy_staging () {
  if [ $# -gt 0 ]; then

    echo "Deploying $# staging sites"
    INDEX=1
    for website in "$@"; do

      ### Load FTP credentials
      eval $(captaincore site get $website --bash)

      ### Credentials found, start the backup
      if ! [ -z "$domain" ]; then

        if [ "$homedir" == "" ]; then
          homedir="/"
        fi

        # Unique timestamp
        timestamp=$(date +%s)

        # Make production snapshot with unique timestamp
        if [[ "$skip_uploads" == "true" ]]; then
          captaincore ssh $website --command="wp db export --skip-plugins --skip-themes --add-drop-table - > wp-content/mysql.sql; zip -r wp-content_$timestamp.zip wp-content/ --exclude=wp-content/uploads/\* --exclude=wp-content/updraft/\*"
        else
          captaincore ssh $website --command="wp db export --skip-plugins --skip-themes --add-drop-table - > wp-content/mysql.sql; zip -r wp-content_$timestamp.zip wp-content/"
        fi

        # Download production snapshot to staging site and import database
        captaincore ssh $website-staging --command="wget http://$address/wp-content_$timestamp.zip; mv wp-content_$timestamp.zip wp-content.zip; rm -rf wp-content/; unzip wp-content.zip; rm wp-content.zip; wp db import wp-content/mysql.sql --skip-plugins --skip-themes"

        # Remove from production_to_staging_kinsta
        captaincore ssh $website --command="rm -f wp-content_$timestamp.zip"

        # Find and replace urls
        captaincore ssh $website-staging --command="wp search-replace //$domain //staging-$website.kinsta.com --all-tables --skip-plugins --skip-themes; wp search-replace //www.$domain //staging-$website.kinsta.com --all-tables --skip-plugins --skip-themes"

        # Enable search privacy and disable email on staging site
        captaincore ssh $website-staging --command="wp option update blog_public 0 --skip-plugins --skip-themes; wp plugin install log-emails disable-emails --activate --skip-plugins --skip-themes; wp plugin deactivate sendgrid-email-delivery-simplified mailgun login-recaptcha --skip-plugins --skip-themes"

        ## Post completion to CaptainCore API
        if [[ $captaincore_dev == true ]]; then
          curl -k --data-urlencode "command=production-to-staging" --data-urlencode "email=$email" --data-urlencode "token=$token" "$captaincore_api/$domain/"
        else
          curl --data-urlencode "command=production-to-staging" --data-urlencode "email=$email" --data-urlencode "token=$token" "$captaincore_api/$domain/"
        fi

      fi

      ### Clear out variables
      domain=''
      username=''
      password=''
      address=''
      protocol=''
      port=''
      username_staging=''
      password_staging=''
      address_staging=''
      protocol_staging=''
      port_staging=''
      preloadusers=''
      homedir=''
      remoteserver=''
      s3bucket=''
      s3path=''
      subsite=''

      let INDEX=${INDEX}+1
    done

  fi
}

### See if any specific sites are selected
if [ ${#arguments[*]} -gt 0 ]; then
  # Deploy sites to staging
  deploy_staging ${arguments[*]}
fi
