#!/usr/bin/env bash

#
#   Preloading SSH Keys (Kinsta Only)
#
#   `captaincore deploy keys <site>`
#

root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

run_command() {

  website=$1

  # Load site vars
  while read site_configs; do declare "$site_configs"; done <<< "$(captaincore site get $website --bash --captain_id=$captain_id)"

  if [[ $address == *".kinsta."* ]]; then

    # Extract environment
    if [[ "$website" == *"-staging"* ]]; then
      environment="-staging"
    fi

    # Check for authorized_keys using rclone's JSON
    check_for_keys=$( rclone lsjson sftp-${site}${environment}:.ssh/authorized_keys --no-modtime )

    # PHP script to read JSON value
    read -r -d '' php_code << heredoc
\$raw = <<< EOT
$check_for_keys
EOT;
\$json = json_decode( \$raw );
echo \$json[0]->Path;
heredoc

  # Read the "Path" JSON value
  found_authorized_keys=$( php -r "$php_code" )

  # Read local key
  local_public_key=$( cat ~/.ssh/id_rsa.pub )

  # No authorized_keys found, generate new one
  if [[ "$found_authorized_keys" != "authorized_keys" ]]; then
    echo local_public_key | rclone rcat sftp-${site}${environment}:.ssh/authorized_keys
  fi

  # Exmaine existing authorized_keys file
  if [[ "$found_authorized_keys" == "authorized_keys" ]]; then

    # Fetch current authorized_keys
    authorized_keys=$( rclone cat sftp-${site}${environment}:.ssh/authorized_keys )

    # Check if key is already added
    if [ -z "${authorized_keys##*$local_public_key*}" ]; then
      echo "Key already added."
    else 
      echo "Adding key."
      printf "$authorized_keys\n$local_public_key\n" | rclone rcat sftp-${site}${environment}:.ssh/authorized_keys
    fi

  fi

  return

  echo "Not a Kinsta site, skipping ssh keys"
  
fi

}
run_command $1
