#!/bin/bash

#
#   Sync website data
#
#   `captaincore sync-data`
#
#   [<site>]
#   Syncs website data for specific site. Defaults for all sites.
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config

# Loop through arguments and separate regular arguments from flags (--flag)
for var in "$@"
do
	# If starts with "--" then assign it to a flag array
    if [[ $var == --* ]]
    then
    	count=1+${#flags[*]}
    	flags[$count]=$var
    # Else assign to an arguments array
    else
    	count=1+${#arguments[*]}
    	arguments[$count]=$var
    fi
done

# Loop through flags and assign to variable. A flag "--skip-dropbox" becomes $flag_skip_dropbox
for i in "${!flags[@]}"
do

	# replace "-" with "_" and remove leading "--"
	flag_name=`echo ${flags[$i]} | tr - _`
	flag_name=`echo $flag_name | cut -c 3-`

	# assigns to $flag_flagname
	declare "flag_$flag_name"=true

done

sync_data () {
if [ $# -gt 0 ]; then

	echo "Sync data on $# sites"
	INDEX=1
	for website in "$@"; do

		# Load site configs
		eval $(captaincore site get $website --bash)

		# Site found, start the backup
		if ! [ -z "$domain" ]; then

			echo "${INDEX}/$# - $domain"

			## Nasty bash hack in order to grab all of the details from one single SSH tunnel (WP Engine connection is slow)
			response=$(captaincore ssh $website --command='wp plugin list --format=json --skip-themes --skip-plugins --skip-packages --fields=name,title,status,version; echo ""; wp theme list --format=json --skip-themes --skip-plugins --skip-packages --fields=name,title,status,version; echo ""; wp core version --skip-themes --skip-plugins --skip-packages; echo ""; wp option get home --skip-themes --skip-plugins --skip-packages')
			if [[ "$response" != "" ]]; then
				IFS=$'\n' read -rd '' -a response_parsed <<<"$response"
				home_url=${response_parsed[3]}

				## Store updated info in WordPress datastore
				site_id=$(captaincore site get $website --field=ID)
				cd ${root_path}data
				wp post meta update $site_id plugins "${response_parsed[0]}"
				wp post meta update $site_id themes "${response_parsed[1]}"
				wp post meta update $site_id core ${response_parsed[2]}
				wp post meta update $site_id home_url ${response_parsed[3]}
			fi

		fi

		### Clear out variables
		domain=''
		username=''
		password=''
		address=''
		protocol=''
		port=''
		homedir=''
		remoteserver=''
    s3bucket=''
    s3path=''
    subsite=''

		let INDEX=${INDEX}+1
	done

fi
}

### See if any specific sites are selected
if [ ${#arguments[*]} -gt 0 ]; then
	# Runs on specific site(s)
	sync_data ${arguments[*]}
else
	# Runs on all sites
	sync_data ${websites[@]}
fi
