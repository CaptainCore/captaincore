#!/usr/bin/env bash

#
#   Creates Quicksave (plugins/themes) of website
#
#   `captaincore quicksave`
#
#   [<site>...]
#   One or more sites.
#
#   [@<target>]
#   Target groups of sites like @all @production or @staging.
#
#   [--force]
#   Force even if no changes were made.
#
#	[--skip-remote]
#	Skips backup to remote
#
#   [--debug]
#   Debug mode
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

run_command() {

	echo "Generating quicksaves for $# sites"

	INDEX=0

	for website in "$@"; do

		let INDEX=${INDEX}+1

		# Extract environment
		if [[ "$website" == *"-staging"* ]]; then
			environment=staging
		else
			environment=production
		fi
		
		# Load site configs
		while read site_configs; do declare "$site_configs"; done <<< "$(captaincore site get $website --bash --captain_id=$captain_id)"

		# Return error if domain not found
		if [[ "$domain" == "" ]] || [[ "$site" == "" ]] || [[ "$provider" == "" ]]; then
			echo "Can't locate website for $site"
			continue
		fi

		# Define Rclone site name
		rclone_site_name=${captain_id}-${site}-${environment}

		# Define site path
		site_path=${site}_${site_id}/${environment}

		# captures FTP errors in $ftp_output and file listing to log file
		ftp_output=$( { rclone lsd sftp-$rclone_site_name:$home_directory; } 2>&1 )
		ftp_search_for_wordpress=$( echo "$ftp_output" | perl -wnE'say for /wp-admin/g' )

		# Handle FTP errors
		if [[ $ftp_search_for_wordpress != "wp-admin" ]]; then
			echo "Can't locate WordPress for ${site}-${environment}"
			continue
		fi

		# Append trailing slash if home_directory exist
		if [ "$home_directory" != "" ]; then
			home_directory="${home_directory}/"
		fi

		echo "$(date +'%Y-%m-%d %H:%M') Begin quicksave for ${site}-${environment} (${INDEX}/$#)"

		# Updates themes/plugins before Quicksave (Selective backup site locally)
		rclone sync sftp-$rclone_site_name:${home_directory}wp-content/themes/ $path/$site_path/backup/wp-content/themes/ --exclude .DS_Store --exclude *timthumb.txt --verbose=1
		rclone sync sftp-$rclone_site_name:${home_directory}wp-content/mu-plugins/ $path/$site_path/backup/wp-content/mu-plugins/ --exclude .DS_Store --exclude *timthumb.txt --verbose=1
		rclone sync sftp-$rclone_site_name:${home_directory}wp-content/plugins/ $path/$site_path/backup/wp-content/plugins/ --exclude .DS_Store --exclude *timthumb.txt --verbose=1

		# Sync to git repo
		mkdir -p $path/$site_path/quicksave/mu-plugins
		mkdir -p $path/$site_path/quicksave/plugins
		mkdir -p $path/$site_path/quicksave/themes
		mkdir -p $path/$site_path/quicksave/versions

		cd $path/$site_path/quicksave/

		# Create new git repo if needed
		if [ ! -d ".git" ]; then
		  git init
		fi

		rsync -a --delete --exclude=.git --exclude="log-*.txt" --exclude="*.log.txt" --exclude="*.zip" --exclude=cache.json --exclude="*.log" --exclude="*.log.txt" $path/$site_path/backup/wp-content/mu-plugins/ $path/$site_path/quicksave/mu-plugins
		rsync -a --delete --exclude=.git --exclude=".cache*"--exclude="log-*.txt" --exclude="*.log.txt" --exclude="*.zip" --exclude=cache.json --exclude="*.log" --exclude="*.log.txt" --exclude=cache/ $path/$site_path/backup/wp-content/plugins/ $path/$site_path/quicksave/plugins
		rsync -a --delete --exclude=.git --exclude=".cache*"--exclude="log-*.txt" --exclude="*.log.txt" --exclude="*.zip" --exclude=cache.json --exclude="*.log" --exclude="*.log.txt" --exclude=cache/ $path/$site_path/backup/wp-content/themes/ $path/$site_path/quicksave/themes

		# Remove leading "--" from flags
		for i in "${!flags[@]}"; do
			flags[$i]=`echo ${flags[$i]} | cut -c 3-`
		done

		cd ${root_path}data

		# Sync data
		wp eval-file ../lib/local-scripts/site-sync-data.php site=$site environment=$environment ${flags[@]}
		
		# Add new quicksave
		wp eval-file ../lib/local-scripts/quicksave-add.php site=$site environment=$environment ${flags[@]}

 	done

	echo "$(date +'%Y-%m-%d %H:%M') Finished generating quicksaves"

}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ]; then
  # Runs on specifed sites
  run_command ${arguments[*]}
fi

# Runs on targeted sites
if [ ${#targets[*]} -gt 0 ]; then
  run_command $(captaincore site list ${targets[*]/targets=/@} --captain_id=$captain_id)
fi

# Error if no sites specifed
if [ ${#targets[*]} -eq 0 ] && [ ${#arguments[*]} -eq 0 ]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify one or more sites, or use a target @all, @production or @staging."
fi
