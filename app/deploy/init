#!/usr/bin/env bash

#
#   Initializes site
#
#   `captaincore deploy init <site>`
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}lib/arguments

run_command() {

  echo "Run init on $# sites"
  INDEX=1

  for website in "$@"; do

    # Extract environment
		if [[ "$website" == *"-staging"* ]]; then
			environment=staging
		else
			environment=production
		fi

    # Load site configs
    eval $(captaincore site get $website --bash)

    if [[ $domain == "" ]]; then
      echo "Error: $site missing domain."
      continue
    fi

    # Captures FTP errors in $ftp_output and file listing to log file
    ftp_output=$( { rclone lsd sftp-$site:$home_directory ; } 2>&1 )
    ftp_search_for_wordpress=$( echo "$ftp_output" | perl -wnE'say for /wp-admin/g' )

    # Handle FTP errors
    if [[ $ftp_search_for_wordpress != "wp-admin" ]]; then
      echo "Error: $site missing WordPress."
      continue
    fi

    # Append trailing slash if home_directory exist
    if [ "$home_directory" != "" ]; then
      home_directory="${home_directory}/"
    fi

    # Pull down wp-config.php and .htaccess
    rclone copy sftp-$site:${home_directory}wp-config.php $path/${site}_${site_id}/${environment}/backup/
    rclone copy sftp-$site:${home_directory}.htaccess $path/${site}_${site_id}/${environment}/backup/

    # load custom configs into wp-config.php and .htaccess
    captaincore get configs --wpconfig=$path/${site}_${site_id}/${environment}/backup/wp-config.php --htaccess=$path/${site}_${site_id}/${environment}/backup/.htaccess --domain=$domain
    sleep 1s

    # Push up modified wp-config.php and .htaccess
    rclone copy $path/${site}_${site_id}/${environment}/backup/wp-config.php sftp-$site:${home_directory}
    rclone copy $path/${site}_${site_id}/${environment}/backup/.htaccess sftp-$site:${home_directory}

    # Generate token
    token_key=$(captaincore get token $site)

    # Assign token and backup link
    curl --request POST "$captaincore_api" --header "Content-Type: application/json" --data @- << EOF
{
	"command":"token",
	"site_id":"$site_id",
	"token_key":"$token_key",
	"token":"$token"
}
EOF

    # Set permalink to 'Post name' format if not set
    captaincore ssh $site --script=rewrite-prep

    # Deploy helper plugin
    captaincore ssh $site --script=deploy-helper

    # Clear out variables
    domain=''
    username=''
    password=''
    address=''
    protocol=''
    port=''
    home_directory=''
    remoteserver=''

    let INDEX=${INDEX}+1
  done

}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ]; then
  # Runs on specifed sites
  run_command ${arguments[*]}
else
  # Runs on all sites
  run_command ${websites[@]}
fi
