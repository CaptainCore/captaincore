#!/bin/bash

##
##      Deploy Kinsta's staging to production
##
##      Pass arguments from command line like this
##      captaincore deploy staging_to_production_kinsta anchorhost --email=1234
##

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source $root_path/config

# Loop through arguments and separate regular arguments from flags (--flag)
for var in "$@"
do
	# If starts with "--" then assign it to a flag array
    if [[ $var == --* ]]
    then
    	count=1+${#flags[*]}
    	flags[$count]=$var
    # Else assign to an arguments array
    else
    	count=1+${#arguments[*]}
    	arguments[$count]=$var
    fi
done

# Loop through flags and assign to variable. A flag "--email=austin@anchor.host" becomes $email
for i in "${!flags[@]}"; do

	# replace "-" with "_" and remove leading "--"
	flag_name=`echo ${flags[$i]} | tr - _`
	flag_name=`echo $flag_name | cut -c 3-`

	# detected flag contains data
	if [[ $flag_name == *"="* ]]; then
	  flag_value=`echo $flag_name | perl -n -e '/.+?=(.+)/&& print $1'` # extract value
	  flag_name=`echo $flag_name | perl -n -e '/(.+)?=.+/&& print $1'` # extract name
	  declare "$flag_name"="$flag_value" # assigns to $flag_flagname
	else
	  # assigns to $flag_flagname boolen
	  declare "$flag_name"=true
	fi

done

deploy_staging () {
if [ $# -gt 0 ]; then

	echo "Deploying $# production sites"
	INDEX=1
	for website in "$@"; do

		### Load FTP credentials
		eval $(captaincore site get $website --bash)

		### Credentials found, start the backup
		if ! [ -z "$domain" ]; then

			if [ "$homedir" == "" ]; then
			   	homedir="/"
			fi

			# Unique timestamp
			timestamp=$(date +%s)

			# Store production url
			production_url=`captaincore ssh $website --command="wp option get home --skip-themes --skip-plugins"`

			# Remove trailing slash if found
			if [[ "${production_url:(-1)}" == "/" ]]; then
				production_url=${production_url::(-1)}
			fi

			# Make staging snapshot with unique timestamp
			captaincore ssh $website-staging --command="wp db export --skip-plugins --skip-themes --add-drop-table - > wp-content/mysql.sql; zip -r wp-content_$timestamp.zip wp-content/"

			# Download staging snapshot to production site and import database
			captaincore ssh $website --command="wget https://staging-${website}.kinsta.com/wp-content_$timestamp.zip; mv wp-content_$timestamp.zip wp-content.zip; rm -rf wp-content/; unzip wp-content.zip; rm wp-content.zip; wp db import wp-content/mysql.sql --skip-plugins --skip-themes"

			# Remove from production_to_staging_kinsta
			captaincore ssh $website-staging --command="rm -f wp-content_$timestamp.zip"

      # Find and replace urls
      captaincore ssh $website --command="wp search-replace http://staging-${website}.kinsta.com $production_url --all-tables --skip-plugins --skip-themes; wp search-replace https://staging-${website}.kinsta.com $production_url --all-tables --skip-plugins --skip-themes"

      # Disable search privacy and deactivate disable email on production site
      captaincore ssh $website --command="wp option update blog_public 1 --skip-plugins --skip-themes; wp plugin deactivate disable-emails --skip-plugins --skip-themes"

			## Post completion to CaptainCore API
			if [[ $captaincore_dev == true ]]; then
				curl -k --data-urlencode "command=staging_to_production_kinsta" --data-urlencode "email=$email" --data-urlencode "token=$token" "$captaincore_api/$domain/"
			else
				curl --data-urlencode "command=staging_to_production_kinsta" --data-urlencode "email=$email" --data-urlencode "token=$token" "$captaincore_api/$domain/"
			fi

		fi

		### Clear out variables
		domain=''
		username=''
		password=''
		address=''
		protocol=''
		port=''
    username_staging=''
    password_staging=''
    address_staging=''
    protocol_staging=''
    port_staging=''
    preloadusers=''
		homedir=''
		remoteserver=''
    s3bucket=''
    s3path=''
    subsite=''

		let INDEX=${INDEX}+1
	done

fi
}

### See if any specific sites are selected
if [ ${#arguments[*]} -gt 0 ]; then
	# Backup selected installs
	deploy_staging ${arguments[*]}
fi
