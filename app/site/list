#!/bin/bash

##
##		Output array of installs from the logins
##
## 		Pass arguments from command line like this
##		[--all] [--staging] [--filter=<theme|plugin|core>] [--filter-name=<name>] [--filter-version=<version>] [--filter-status=<active|inactive|dropin|must-use>] [--field=<field>]
##
##		Usage would look something like this to check for websites with WooCommerce and return only the website install names in bash array
## 		websites=( $(wp post list --post_type=captcore_website --meta_key=plugins --meta_value='"name":"woocommerce"' --meta_compare="LIKE" --fields=install --format=json | json -a install) )
##
##		Create
##		wp post create --meta_input='{"install":"anchorhost1","address":"anchorhost1.wpengine.com"}' --post_title='anchorhost1.wpengine.com' --post_status=publish --post_type=captcore_website
##
##		List all
##		echo $(wp post list --post_type=captcore_website --fields=install | json -a install)
##


# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}

# Loop through arguments and seperate regular arguments from flags (--flag)
for var in "$@"; do
	# If starts with "--" then assign it to a flag array
    if [[ $var == --* ]]
    then
    	count=1+${#flags[*]}
    	flags[$count]=$var
    # Else assign to an arguments array
    else
    	count=1+${#arguments[*]}
    	arguments[$count]=$var
    fi
done

# Loop through flags and assign to varible. A flag "--email=austin@anchor.host" becomes $email
for i in "${!flags[@]}"; do

	# removes leading "--" to safely pass onto `wp eval-file` https://github.com/wp-cli/wp-cli/issues/1030
	flags[$i]=`echo ${flags[$i]} | cut -c 3-`

done

if [[ "$captaincore_dev" == "true" ]]; then
	cd ~/Sites/dev
else
	cd $root_path/data
fi

wp eval-file ${root_path}lib/php/site-list.php ${flags[@]}
