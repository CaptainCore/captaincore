#!/bin/bash

##
##		Creates Quicksave (plugins/themes) of website
##
## 		Pass arguments from command line like this
##		captaincore generate quicksave anchorhost [--force] [--debug]
##

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source $root_path/config

website=$1

# Loop through arguments and separate regular arguments from flags (--flag)
for var in "$@"
do
	# If starts with "--" then assign it to a flag array
    if [[ $var == --* ]]
    then
    	count=1+${#flags[*]}
    	flags[$count]=$var
    # Else assign to an arguments array
    else
    	count=1+${#arguments[*]}
    	arguments[$count]=$var
    fi
done

# Loop through flags and assign to variable. A flag "--email=austin@anchor.host" becomes $email
for i in "${!flags[@]}"
do

	# replace "-" with "_" and remove leading "--"
	flag_name=`echo ${flags[$i]} | tr - _`
	flag_name=`echo $flag_name | cut -c 3-`

	# detected flag contains data
	if [[ $flag_name == *"="* ]]; then
	  flag_value=`echo $flag_name | perl -n -e '/.+?=(.+)/&& print $1'` # extract value
	  flag_name=`echo $flag_name | perl -n -e '/(.+)?=.+/&& print $1'` # extract name
	  declare "$flag_name"="$flag_value" # assigns to $flag_flagname
	else
	  # assigns to $flag_flagname boolen
	  declare "$flag_name"=true
	fi

done

if [ $# -gt 0 ]
then

	snapshot_website() {
	domain=`captaincore site get $website --field=domain`

	## Return error if domain not found
	if [[ "$domain" == "" ]]; then
		echo "Can't locate website for install $website"
		return 1
	fi

	timedate=$(date +%Y-%m-%d_%H-%M-%S)

	## Sync to git repo
	mkdir -p ~/Quicksaves/$domain/mu-plugins
	mkdir -p ~/Quicksaves/$domain/plugins
	mkdir -p ~/Quicksaves/$domain/themes
	mkdir -p ~/Quicksaves/$domain/versions
	cd ~/Quicksaves/$domain/
	if [ ! -d ".git" ]; then
	  git init
	fi

	rsync -a --delete --exclude=.git --exclude=".cache*"--exclude="log-*.txt" --exclude="*.log.txt" --exclude=cache.json --exclude="*.log" --exclude="*.log.txt" --exclude=cache/ ~/Backup/$domain/wp-content/mu-plugins/ ~/Quicksaves/$domain/mu-plugins
	rsync -a --delete --exclude=.git --exclude=".cache*"--exclude="log-*.txt" --exclude="*.log.txt" --exclude=cache.json --exclude="*.log" --exclude="*.log.txt" --exclude=cache/ ~/Backup/$domain/wp-content/plugins/ ~/Quicksaves/$domain/plugins
	rsync -a --delete --exclude=.git --exclude=".cache*"--exclude="log-*.txt" --exclude="*.log.txt" --exclude=cache.json --exclude="*.log" --exclude="*.log.txt" --exclude=cache/ ~/Backup/$domain/wp-content/themes/ ~/Quicksaves/$domain/themes

	## Store plugin/theme in json
	# captaincore ssh $website --command="wp plugin list --format=json --skip-themes --skip-plugins --skip-packages" > ~/Quicksaves/$domain/versions/plugins.json
	# captaincore ssh $website --command="wp theme list --format=json --skip-themes --skip-plugins --skip-packages" > ~/Quicksaves/$domain/versions/themes.json
	# captaincore ssh $website --command="wp core version --skip-themes --skip-plugins --skip-packages" > ~/Quicksaves/$domain/versions/core.json

	## Nasty bash hack in order to grab all of the details from one single SSH tunnel (WP Engine connection is slow)
	response=$(captaincore ssh $website --command='wp plugin list --format=json --skip-themes --skip-plugins --skip-packages --fields=name,title,status,version; echo ""; wp theme list --format=json --skip-themes --skip-plugins --skip-packages --fields=name,title,status,version; echo ""; wp core version --skip-themes --skip-plugins --skip-packages; echo ""; wp option get home --skip-themes --skip-plugins --skip-packages')
	IFS=$'\n' read -rd '' -a response_parsed <<<"$response"
	echo ${response_parsed[0]} > ~/Quicksaves/$domain/versions/plugins.json
	echo ${response_parsed[1]} > ~/Quicksaves/$domain/versions/themes.json
	echo ${response_parsed[2]} > ~/Quicksaves/$domain/versions/core.json

	plugin_data=`cat ~/Quicksaves/$domain/versions/plugins.json`
	theme_data=`cat ~/Quicksaves/$domain/versions/themes.json`
	core_version=`cat ~/Quicksaves/$domain/versions/core.json`
	home_url=${response_parsed[3]}
	# plugin_data=$(git show $git_hash:versions/plugins.json --format=)
	# theme_data=$(git show $git_hash:versions/themes.json --format=)
	# core_version=$(git show $git_hash:versions/core.json --format=)

	# Add all files to git repo
	git add -A

	# Current git status
	git_status=`git status -s`

	if [[ "$git_status" == "" && "$force" != "true" ]]; then
		# Skip quicksave as nothing changed
		echo "Quicksave skipped as nothing changed"
		return 1
	fi

	# New commit
	git_commit=`git commit -m "quicksave on $timedate"`

	# Save git hash
	git_hash=`git log -n 1 --pretty=format:"%H"`  #To get only hash value of commit
	git_status=`git show $git_hash --shortstat --format=`
	git_status=`echo -e "$git_status" | sed -e 's/^[[:space:]]*//' | base64 -w 0`
	plugin_data=`echo -e $plugin_data | base64 -w 0`
	theme_data=`echo -e $theme_data | base64 -w 0`
	echo "Git hash $git_hash"

	if [[ "$debug" == "true" ]]; then
		echo "$captaincore_api/$domain/?git_commit=$git_hash&git_status=$git_status&core=$core_version&plugins=$plugin_data&themes=$theme_data&token=$token"
		return 1
	fi

	### Adds quicksave to CaptainCore Plugin
	if [[ "$captaincore_dev" == true ]]; then
		curl -k --data-urlencode "home_url=$home_url" --data-urlencode "git_commit=$git_hash" --data-urlencode "git_status=$git_status" --data-urlencode "core=$core_version" --data-urlencode "plugins=$plugin_data" --data-urlencode "themes=$theme_data" --data-urlencode "token=$token" "$captaincore_api/$domain/"
	else
		curl --data-urlencode "home_url=$home_url" --data-urlencode "git_commit=$git_hash" --data-urlencode "git_status=$git_status" --data-urlencode "core=$core_version" --data-urlencode "plugins=$plugin_data" --data-urlencode "themes=$theme_data" --data-urlencode "token=$token" "$captaincore_api/$domain/"
	fi

	## Generates snapshot archive
	#cd ~/Backup/
	#zip -r ~/Quicksaves/$domain-$timedate.zip $domain/ --include=$domain/wp-content/plugins/\* --include=$domain/wp-content/themes/\*

	## Store updated info in WordPress datastore
	site_id=$(captaincore site get $website --field=ID)
	cd $root_path/data
	wp post meta update $site_id plugins "${response_parsed[0]}"
	wp post meta update $site_id themes "${response_parsed[1]}"
	wp post meta update $site_id core ${response_parsed[2]}
	wp post meta update $site_id home_url ${response_parsed[3]}

	}
	snapshot_website

fi
