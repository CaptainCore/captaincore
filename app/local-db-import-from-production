#!/usr/bin/env bash

#
#   Import production database to local WordPress site
#
#   `captaincore local-db-import-from-production <site>`
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

run_command() {

  echo "Importing $# site"
  INDEX=1
  for website in "$@"; do

    # Load site configs
    eval $(captaincore site get $website --bash --captain_id=$captain_id)

    if ! [ -z "$domain" ]; then
			echo "$domain not found"
			continue
		fi

    # Make database backup on production
    captaincore ssh $website --command="wp db export --skip-plugins --skip-themes --add-drop-table - > wp-content/mysql.sql"

    # Sync production to local directory
    rclone copy sftp-$website:${home_directory}/wp-content/mysql.sql wp-content/ --verbose=1

    # Import database locally
    wp db import wp-content/mysql.sql --skip-plugins --skip-themes

    # Disable emails
    wp plugin install log-emails disable-emails --skip-plugins --skip-themes --activate --force

    # Update urls
    current_url=$( wp option get home )
    new_url=https://${PWD##*/}.test
    wp search-replace $current_url $new_url --all-tables --skip-plugins --skip-themes --report-changed-only

    ### Clear out variables
    domain=''
    username=''
    password=''
    address=''
    protocol=''
    port=''
    username_staging=''
    password_staging=''
    address_staging=''
    protocol_staging=''
    port_staging=''
    preloadusers=''
    home_directory=''
    remoteserver=''
    s3bucket=''
    s3path=''
    subsite=''

    let INDEX=${INDEX}+1
  done

}

# See if any specific sites are selected
if [ ${#arguments[*]} -gt 0 ]; then
  # Import production site database locally
  run_command ${arguments[*]}
fi
