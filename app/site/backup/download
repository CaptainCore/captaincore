#!/usr/bin/env bash

#
#   Runs custom bash script or WP-CLI commands on a site.
#
#   `captaincore site backup download <site> <backup_id> --payload=<payload_id>`
#
#   [<email>]
#   Sent email with downloadable link
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

# Error if no sites specifed
if [ ${#arguments[*]} -eq 0 ] || [[ "$payload" == "" ]]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify a <site> and --payload=<payload_id>."
fi

site=$1
backup_id=$2

# Extract environment
if [[ "$site" == *"-staging"* ]]; then
    environment=staging
fi

if [[ "$site" == *"-production"* ]]; then
    environment=production
fi

if [[ "$site" != *"-"* ]]; then
    environment=production
fi
mkdir -p "${root_path}data/payload/"
payload_file="${root_path}data/payload/${payload}.txt"

# Load site configs
while read site_configs; do if [[ $site_configs == "" ]]; then continue; fi; declare "$site_configs"; done <<< "$(captaincore site get $site --bash --captain_id=$captain_id)"

timestamp=$( date +'%Y-%m-%d_%H-%M-%S' )
restore_path="$path/${site}_${site_id}/${environment}/restores/${timestamp}-${backup_id:0:8}"
mount_name="mount_${captain_id}-$site-${environment}-${timestamp}-${backup_id:0:8}"
zip_name="${site}_${environment}_${backup_id:0:8}_at_$timestamp.zip"
mkdir -p "$restore_path"

read -r -d '' php_code << heredoc
\$tree_items = json_decode( base64_decode( file_get_contents ( "$payload_file" ) ) );
file_put_contents ( "$restore_path/files_to_restore.txt", implode( PHP_EOL, \$tree_items ) );
heredoc

php -r "$php_code"

echo "Mounting Restic repo"
command="mount ${restore_path}/$mount_name/ --repo rclone:$rclone_backup/${site}_${site_id}/${environment}/restic-repo"
restic $command > $restore_path/restic-mount.log 2>&1 &
count=0

while true; do

    echo -n "."
    reading_mount_progress=""

    # Assume something didn't work if takes longer then 10 minutes
    if [ $count -gt 600 ]; then
        echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Mounting Restic repo failed."
        exit 1
    fi

    if [ -f "$restore_path/restic-mount.log" ]; then
        reading_mount_progress=$( cat $restore_path/restic-mount.log )
    fi

    if [[ "$reading_mount_progress" == *"Now serving the repository at"* ]]; then
        break
    fi

    sleep 1
    let count+=1

done

echo ""
timestamp=$( stat -c %Y ${restore_path}/$mount_name/ids/${backup_id:0:8}/ )
read -r -d '' php_code << heredoc
\$dt = new DateTime("@$timestamp"); echo \$dt->format("Y-m-d g:i:s a");
heredoc
timestamp=$( php -r "$php_code" )
rclone copy --files-from ${restore_path}/files_to_restore.txt ${restore_path}/$mount_name/ids/${backup_id:0:8}/ ${restore_path}/restore/ --transfers 32
umount ${restore_path}/$mount_name/
rmdir ${restore_path}/$mount_name/
cd $restore_path
zip -qr ${zip_name} restore/
rm -rf ${restore_path}/restore/

# Moves snapshot to Backblaze archive folder
rclone move $zip_name $rclone_snapshot/${site}_${site_id}/

# Remove leading "--" from flags
for i in "${!flags[@]}"; do
flags[$i]=`echo ${flags[$i]} | cut -c 3-`
done

cd ${root_path}data
backup_url=$( wp eval-file ../lib/local-scripts/restore-fetch-download-link.php zip_name="$zip_name" site=$site site_id=$site_id ${flags[@]} )
echo $backup_url

if [[ $email != "" ]]; then
    count=$(( $( wc -l "$restore_path/files_to_restore.txt" | awk '{ print $1 }' ) + 1 ))
    printf "Contains files from $domain $environment environment as of $timestamp.<br><a href='$backup_url'>Download zip</a><br><br>" | mutt -e 'set content_type=text/html' -s "Downloadable zip with $count items" -- $email
fi
