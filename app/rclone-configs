#!/usr/bin/env bash

#
#   Generates rclone configs based on site credentials
#
#   `captaincore rclone-configs <site>`
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

site=$1

run_command() {

  # Load site vars
  while read site_configs; do if [[ $site_configs == "" ]]; then continue; fi; declare "$site_configs"; done <<< "$(captaincore site get $site --bash --captain_id=$captain_id)"

  # Domain not found
  if [[ $domain == "" ]]; then
    echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Domain not found."
    return
  fi

  site_name=$site

  # Adjust path if fleet mode enabled
  if [[ "$captaincore_fleet" == "true" ]]; then 
    site_name=${captain_id}-${site}
  fi

  # Remove if already found
  rclone config delete sftp-${site_name}-production
  rclone config delete sftp-${site_name}-staging

  echo "$(date +'%Y-%m-%d %H:%M') Generating rclone configs for $site"

  password=$(captaincore site get ${site} --field=password --captain_id=$captain_id)
  password_staging=$(captaincore site get ${site}-staging --field=password --captain_id=$captain_id)

  # Add new WordPress site to Rclone
  rclone_pass=$(rclone obscure $password)
  rclone config create sftp-${site_name}-production $protocol host $address user $username port $port pass -- $rclone_pass

  if [[ "$password_staging" != "" ]]; then
    while read site_configs; do declare "$site_configs"; done <<< "$(captaincore site get ${site}-staging --bash --captain_id=$captain_id)"
    rclone_pass=$(rclone obscure $password_staging)
    rclone config create sftp-${site_name}-staging $protocol host $address user $username port $port pass -- $rclone_pass
  fi

}
run_command
