#!/bin/bash

##
##      Generates usage stats (Storage and Views) for CaptainCore Plugin
##
##      Pass arguments from command line like this
##      captaincore usage-update <site> <site>
##
##      Or backup everything like this
##      captaincore usage-update
##

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}/lib/arguments

run_command () {
  if [ $# -gt 0 ]; then

    echo "Generating usage stats for $# websites"
    INDEX=1
    for website in "$@"; do

      ### Load FTP credentials
      eval $(captaincore site get $website --bash)

      ### If subsite update stats and skip backup
      if [[ $subsite == "true" ]]; then

        ### Views for yearly stats
        views=`captaincore stats $domain`

        ### Updates stats with no storage since it's a subsite
        curl --data-urlencode "storage=0" --data-urlencode "views=$views" --data-urlencode "token=$token" "$captaincore_api/$domain/"

      fi

      ### Credentials found, start the backup
      if ! [ -z "$domain" ]; then

        if [[ "$OSTYPE" == "linux-gnu" ]]; then
          ### Begin folder size in bytes without apparent-size flag
          folder_size=`du -s --block-size=1 $path/$site/backup/`
          folder_size=`echo $folder_size | cut -d' ' -f 1`
        elif [[ "$OSTYPE" == "darwin"* ]]; then
          ### Calculate folder size in bytes http://superuser.com/questions/22460/how-do-i-get-the-size-of-a-linux-or-mac-os-x-directory-from-the-command-line
          folder_size=`find $path/$site/backup/ -type f -print0 | xargs -0 stat -f%z | awk '{b+=$1} END {print b}'`
        fi

        ### Views for yearly stats
        views=`captaincore stats $domain`

        # Post folder size bytes and yearly views to ACF field
        curl --data-urlencode "storage=$folder_size" --data-urlencode "views=$views" --data-urlencode "token=$token" "$captaincore_api/$domain/"
        echo "Generated $domain"
      fi

      ### Clear out variables
      domain=''
      username=''
      password=''
      address=''
      protocol=''
      port=''
      homedir=''
      remoteserver=''
      s3bucket=''
      s3path=''
      subsite=''

      let INDEX=${INDEX}+1
    done

  fi
}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ]; then
  # Runs on specifed sites
  run_command ${arguments[*]}
else
  # Runs on all sites
  run_command ${websites[@]}
fi
