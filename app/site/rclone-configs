#!/usr/bin/env bash

#
#   Generates rclone configs based on site credentials
#
#   `captaincore site rclone-configs <site>`
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

site=$1

run_command() {

  # Load site vars
  while read site_configs; do if [[ $site_configs == "" ]]; then continue; fi; declare "$site_configs"; done <<< "$(captaincore site get $site --bash --captain_id=$captain_id)"

  # Domain not found
  if [[ $domain == "" ]]; then
    echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Domain not found."
    return
  fi

  site_name=$site

  # Adjust path if fleet mode enabled
  if [[ "$captaincore_fleet" == "true" ]]; then 
    site_name=${captain_id}-${site}
  fi

  environments=( $( captaincore site environment list $site --captain_id=$captain_id ) )

  for environment in ${environments[@]}; do

    while read site_configs; do if [[ $site_configs == "" ]]; then continue; fi; declare "$site_configs"; done <<< "$(captaincore site get $site-$environment --bash --captain_id=$captain_id)"

    rclone config delete sftp-${site_name}-${environment}

    if [[ "$key" != "" ]]; then
      ssh_file="$path_keys/${captain_id}/${key}"
      echo "Generating rclone configs for ${site}-${environment} with SSH key"
      quiet=$( rclone config create sftp-${site_name}-${environment} $protocol host $address user $username port $port key_file $ssh_file )
    fi

    if [[ "$key" == "" ]]; then
      password=$(captaincore site get ${site}-${environment} --field=password --captain_id=$captain_id)
      rclone_pass=$(rclone obscure $password)
      echo "Generating rclone configs for ${site}-${environment} with password"
      quiet=$( rclone config create sftp-${site_name}-${environment} $protocol host $address user $username port $port pass -- $rclone_pass )
    fi

  done

}
run_command
