#!/bin/bash

#
#   Creates Quicksave (plugins/themes) of website
#
#   `captaincore quicksave`
#
#   [<site>...]
#   One or more sites to update.
#
#   [--all]
#   Quicksaves all sites.
#
#   [--force]
#   Force even if no changes were made.
#
#   [--debug]
#   Debug mode
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}lib/arguments

run_command() {

	if [ $# -gt 0 ]; then

	echo "Generating quicksaves for $# sites"

	# Generate random auth
	auth=''; for count in {0..6}; do auth+=$(printf "%x" $(($RANDOM%16)) ); done;

	# Begin time tracking
	overalltimebegin=$(date +"%s")
	backup_date=$(date +'%Y-%m-%d')
	backup_time=$(date +'%H-%M')

	# Define log file format
	logs_path=$logs/$backup_date/$backup_time-$auth

	# Generate log folder
	mkdir -p $logs_path

	# Begin logging
	echo "$(date +'%Y-%m-%d %H:%M') Begin generating quicksaves" > $logs_path/quicksave.log

	INDEX=0

	for website in "$@"; do

		let INDEX=${INDEX}+1

		# Load site configs
		eval $(captaincore site get $website --bash)

		## Return error if domain not found
		if [[ "$domain" == "" ]] || [[ "$site" == "" ]]; then
			echo "Can't locate website for $site"
			continue
		fi

		# captures FTP errors in $ftp_output and file listing to log file
		ftp_output=$( { rclone lsd sftp-$site:$homedir ; } 2>&1 )
		ftp_search_for_wordpress=`echo "$ftp_output" | perl -wnE'say for /wp-admin/g'`

		# Handle FTP errors
		if [[ $ftp_search_for_wordpress != "wp-admin" ]]; then
			echo "Can't locate WordPress for $site"
			continue
		fi

		# Append trailing slash if homedir exist
		if [ "$homedir" != "" ]; then
			homedir="${homedir}/"
		fi

		echo "$(date +'%Y-%m-%d %H:%M') Begin quicksave for $site (${INDEX}/$#)" >> $logs_path/quicksave.log
		echo "$(date +'%Y-%m-%d %H:%M') Begin quicksave for $site (${INDEX}/$#)"

		# Updates themes/plugins before Quicksave (Selective backup site locally)
		rclone sync sftp-$site:${homedir}wp-content/themes/ $path/${site}_${site_id}/backup/wp-content/themes/ --exclude .DS_Store --exclude *timthumb.txt --verbose=1 --log-file="$logs_path/site-$site.txt"
		rclone sync sftp-$site:${homedir}wp-content/mu-plugins/ $path/${site}_${site_id}/backup/wp-content/mu-plugins/ --exclude .DS_Store --exclude *timthumb.txt --verbose=1 --log-file="$logs_path/site-$site.txt"
		rclone sync sftp-$site:${homedir}wp-content/plugins/ $path/${site}_${site_id}/backup/wp-content/plugins/ --exclude .DS_Store --exclude *timthumb.txt --verbose=1 --log-file="$logs_path/site-$site.txt"
		echo "" >> $logs_path/site-$site.txt

		## Current timestamp
		timedate=$(date +%Y-%m-%d_%H-%M-%S)

		## Sync to git repo
		mkdir -p $path/${site}_${site_id}/quicksave/mu-plugins
		mkdir -p $path/${site}_${site_id}/quicksave/plugins
		mkdir -p $path/${site}_${site_id}/quicksave/themes
		mkdir -p $path/${site}_${site_id}/quicksave/versions

		cd $path/${site}_${site_id}/quicksave/

		## Create new git repo if needed
		if [ ! -d ".git" ]; then
		  git init
		fi

		rsync -a --delete --exclude=.git --exclude=".cache*"--exclude="log-*.txt" --exclude="*.log.txt" --exclude="*.zip" --exclude=cache.json --exclude="*.log" --exclude="*.log.txt" --exclude=cache/ $path/${site}_${site_id}/backup/wp-content/mu-plugins/ $path/${site}_${site_id}/quicksave/mu-plugins
		rsync -a --delete --exclude=.git --exclude=".cache*"--exclude="log-*.txt" --exclude="*.log.txt" --exclude="*.zip" --exclude=cache.json --exclude="*.log" --exclude="*.log.txt" --exclude=cache/ $path/${site}_${site_id}/backup/wp-content/plugins/ $path/${site}_${site_id}/quicksave/plugins
		rsync -a --delete --exclude=.git --exclude=".cache*"--exclude="log-*.txt" --exclude="*.log.txt" --exclude="*.zip" --exclude=cache.json --exclude="*.log" --exclude="*.log.txt" --exclude=cache/ $path/${site}_${site_id}/backup/wp-content/themes/ $path/${site}_${site_id}/quicksave/themes

		## Nasty bash hack in order to grab all of the details from one single SSH tunnel (WP Engine connection is slow)
		response=$(captaincore ssh $site --script=fetch-site-data)
		IFS=$'\n' read -rd '' -a response_parsed <<<"$response"
		echo ${response_parsed[0]} > $path/${site}_${site_id}/quicksave/versions/plugins.json
		echo ${response_parsed[1]} > $path/${site}_${site_id}/quicksave/versions/themes.json
		echo ${response_parsed[2]} > $path/${site}_${site_id}/quicksave/versions/core.json

		home_url=${response_parsed[3]}
		users=${response_parsed[4]}

		# Add all files to git repo
		git add -A

		# Current git status
		git_status=$(git status -s)

		if [[ "$git_status" == "" && "$force" != "true" ]]; then
			# Skip quicksave as nothing changed
			echo "Quicksave skipped as nothing changed"
			continue
		fi

		# New commit
		git_commit=$(git commit -m "quicksave on $timedate")

		# Save git hash
		git_commit=$(git log -n 1 --pretty=format:"%H")  # Get hash of last commit (commit hash)
		git_status=$(git show $git_commit --shortstat --format=)
		core=$(git show ${git_commit}:versions/core.json)
		themes=$(git show ${git_commit}:versions/themes.json)
		plugins=$(git show ${git_commit}:versions/plugins.json)
		date=$(git show -s --pretty=format:"%ct" $git_commit) # Get date of last commit (UNIX timestamp)

		# Build json for quicksave
		read -r -d '' quicksave << EOM
[{
"git_commit":"$git_commit",
"git_status":"$git_status",
"date":"$date",
"core":"$core",
"themes":$themes,
"plugins":$plugins
}]
EOM

		echo "Git hash $git_commit"

		if [[ "$debug" == "true" ]]; then
			read -r -d '' VAR << EOM
{
	"command": "import-quicksaves",
	"site_id":"$site_id",
	"data": $quicksave,
	"home_url":"$home_url",
	"themes":$themes,
	"plugins":$plugins,
	"users":$users,
	"token":"$token"
}
EOM
			echo $VAR
			continue
		fi

		# Adds quicksave to CaptainCore GUI
		if [[ "$captaincore_dev" == true ]]; then
			curl_argument="-k"
		fi

		# Adds quicksave to CaptainCore GUI
		curl ${curl_argument} --request POST "$captaincore_api" --header "Content-Type: application/json" --data @- << EOM
{
	"command": "import-quicksaves",
	"site_id":"$site_id",
	"data": $quicksave,
	"home_url":"$home_url",
	"themes":$themes,
	"plugins":$plugins,
	"users":$users,
	"token":"$token"
}
EOM

		## Store updated info in WordPress datastore
		cd ${root_path}data
		wp post meta update $site_id plugins "${response_parsed[0]}"
		wp post meta update $site_id themes "${response_parsed[1]}"
		wp post meta update $site_id core ${response_parsed[2]}
		wp post meta update $site_id home_url ${response_parsed[3]}
		wp post meta update $site_id users "${response_parsed[4]}"

		# Backup Quicksave to remote
		ts rclone sync $path/${site}_${site_id}/quicksave/ $rclone_backup/${site}_${site_id}/quicksave/ -v --exclude .DS_Store --fast-list --transfers=32 --log-file="$logs_path/site-$site-remote.txt"

		# Clear out variables
		site=''
		domain=''
		homedir=''
		subsite=''
		response=''
		response_parsed=''

	done

	# End logging
	echo "$(date +'%Y-%m-%d %H:%M') Finished generating quicksaves" >> $logs_path/quicksave.log

	fi
}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ]; then
  # Runs on specific sites
  run_command ${arguments[*]}
fi

if [[ $all == "true" ]]; then
  # Runs on all sites
  echo "Quicksaves all sites"
	run_command ${websites[@]}
fi

# Error if no sites specifed
if [[ $all != "true" ]] && [ ${#arguments[*]} -eq 0 ]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify one or more sites, or use --all."
fi
