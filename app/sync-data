#!/bin/bash

#
#   Sync website data
#
#   `captaincore sync-data`
#
#   [<site>...]
#   One or more sites.
#
#   [--all]
#   Sync website data for all sites.
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}lib/arguments

run_command () {
if [ $# -gt 0 ]; then

	echo "Sync data on $# sites"
	INDEX=1
	for website in "$@"; do

		# Load site configs
		eval $(captaincore site get $website --bash)

		# Site found, start the backup
		if [[ $site_id != "" ]] && [[ $site != "" ]]; then

			echo "${INDEX}/$# - $domain"

			# Nasty bash hack in order to grab all of the details from one single SSH tunnel (WP Engine connection is slow)
			response=$(captaincore ssh $site --script=fetch-site-data)
			if [[ "$response" != "" ]]; then
				IFS=$'\n' read -rd '' -a response_parsed <<<"$response"

				plugin_data=${response_parsed[0]}
				theme_data=${response_parsed[1]}
				core_version=${response_parsed[2]}
				home_url=${response_parsed[3]}
				user_data=${response_parsed[4]}

				# Store updated info in WordPress datastore
				cd ${root_path}data
				wp post meta update $site_id plugins "$plugin_data"
				wp post meta update $site_id themes "$theme_data"
				wp post meta update $site_id core $core_version
				wp post meta update $site_id home_url $home_url
				wp post meta update $site_id users "$user_data"

				if [[ "$OSTYPE" == "linux-gnu" ]]; then
					# Linux - Base64 disable line wrapping
					plugin_data=`echo -e $plugin_data | base64 -w 0`
					theme_data=`echo -e $theme_data | base64 -w 0`
					user_data=`echo -e $user_data | base64 -w 0`
				elif [[ "$OSTYPE" == "darwin"* ]]; then
					# MacOS - Base64
					plugin_data=`echo -e $plugin_data | base64`
					theme_data=`echo -e $theme_data | base64`
					user_data=`echo -e $user_data | base64`
				fi

				if [[ "$debug" == "true" ]]; then
					echo "$captaincore_api/$domain/?core=$core_version&plugins=$plugin_data&themes=$theme_data&users=$user_data&token=$token"
					continue
				fi

				# Adds sync data to CaptainCore GUI
				if [[ "$captaincore_dev" == true ]]; then
					curl -k --data-urlencode "command=sync-data" --data-urlencode "home_url=$home_url" --data-urlencode "core=$core_version" --data-urlencode "plugins=$plugin_data" --data-urlencode "themes=$theme_data" --data-urlencode "users=$user_data" --data-urlencode "token=$token" "$captaincore_api/$domain/"
				else
					curl --data-urlencode "command=sync-data" --data-urlencode "home_url=$home_url" --data-urlencode "core=$core_version" --data-urlencode "plugins=$plugin_data" --data-urlencode "themes=$theme_data" --data-urlencode "users=$user_data" --data-urlencode "token=$token" "$captaincore_api/$domain/"
				fi
			fi

		fi

		# Clear out variables
		site=''
		site_id=''
		domain=''
		username=''
		password=''
		address=''
		protocol=''
		port=''
		homedir=''
		remoteserver=''
    s3bucket=''
    s3path=''
    subsite=''

		let INDEX=${INDEX}+1
	done

fi
}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ]; then
  # Runs on specific sites
  run_command ${arguments[*]}
fi

if [[ $all == "true" ]]; then
  # Runs on all sites
  echo "Sync website data on all sites"
	run_command ${websites[@]}
fi

# Error if no sites specifed
if [[ $all != "true" ]] && [ ${#arguments[*]} -eq 0 ]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify one or more sites, or use --all."
fi
