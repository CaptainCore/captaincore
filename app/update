#!/bin/bash

##
##      Updates themes/plugins on WordPress sites
##
##      Update selective sites
##      captaincore update [<site>] [<site>] [<site>]...
##
##      Update all sites
##      captaincore update
##

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}lib/arguments

run_command () {
  if [ $# -gt 0 ]; then

    ### Begin time tracking
    overalltimebegin=$(date +"%s")
    backup_date=$(date +'%Y-%m-%d')
    backup_time=$(date +'%H-%M')

    ### Begin logging
    echo "$(date +'%Y-%m-%d %H:%M') Begin updates"

    echo "Updating $# sites"
    INDEX=1
    for site in "$@"; do

      ### Load FTP credentials
      eval $(captaincore site get $site --bash)

      ### Credentials found, start the backup
      if ! [ -z "$domain" ]; then

        # captures FTP errors in $ftp_output and file listing to log file
        ftp_output=$( { rclone lsd sftp-$site:$homedir ; } 2>&1 )
        ftp_search_for_wordpress=`echo "$ftp_output" | perl -wnE'say for /wp-admin/g'`

        # Handle FTP errors
        if [[ $ftp_search_for_wordpress != "wp-admin" ]]; then

          # WordPress not found, so performing regular backup
          echo "WordPress not found: $site ($ftp_output)"
        else
          ## No errors found, run updates

          ### run updates
          echo "$(date +'%Y-%m-%d %H:%M') Begin updates on $site (${INDEX}/$#)"

					### Define log file format
					logs_path=$path/Updates/$site/

					### Generate log folder
					mkdir -p $logs_path

					json_output=$(captaincore ssh $site --script=update --all --format=json --dry-run)
					# If json output detected then parse updates
					if [[ "$json_output" = *"[{"* ]]; then

						IFS=$'\n' read -rd '' -a response_parsed <<<"$json_output"
						echo "theme updates ${response_parsed[0]}"
						echo "plugin updates ${response_parsed[1]}"

						# Generate theme json if themes updated
						if [[ "${response_parsed[0]}" = *"[{"* ]]; then
							echo "Writing theme updates to file"
							echo ${response_parsed[0]} > $logs_path/$(date +'%Y-%m-%d-%H%M%S')-themes.json
					  fi

						# Generate plugin json if plugins updated
						if [[ "${response_parsed[1]}" = *"[{"* ]]; then
							echo "Writing plugin updates to file"
							echo ${response_parsed[1]} > $logs_path/$(date +'%Y-%m-%d-%H%M%S')-plugins.json
					  fi

					fi
        fi

      fi

      ### Clear out variables
      domain=''
      username=''
      password=''
      address=''
      protocol=''
      port=''
      homedir=''
      remoteserver=''
      s3bucket=''
      s3path=''
      subsite=''

      let INDEX=${INDEX}+1
    done

    echo "$(date +'%Y-%m-%d %H:%M') Updates finished"

    ### End time tracking
    overalltimeend=$(date +"%s")
    diff=$(($overalltimeend-$overalltimebegin))
    echo "$(date +'%Y-%m-%d %H:%M') $(($diff / 3600)) hours, $((($diff / 60) % 60)) minutes and $(($diff % 60)) seconds elapsed."

  fi
}

### See if any specific sites are selected
if [ ${#arguments[*]} -gt 0 ]; then
  # Backup selected sites
  run_command ${arguments[*]}
else
  # Backup all sites
  run_command ${websites[@]}
fi
