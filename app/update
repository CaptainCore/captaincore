#!/usr/bin/env bash

#
#   Runs themes, plugins and core updates on one or more sites.
#
#   `captaincore update`
#
#   [<site>...]
#   One or more sites to update.
#
#   [@<target>]
#   Target groups of sites like @all @production or @staging. Use `captaincore update @production.updates-on` to target production sites marked for automatic updates.
#
#   [--exclude-themes=<themes>]
#   Passed onto `wp theme update --exclude=<theme-names>`
#
#   [--exclude-plugins=<plugins>]
#   Passed onto `wp plugin update --exclude=<theme-names>`
#

if [ ${#@} -ne 1 ]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify a <site>."
fi

while read config; do
  if [[ "$config" == "Error:"* ]]; then
    continue
  fi
  declare "$config"
done <<< "$(php ${CAPTAINCORE_PATH}/lib/local-scripts/configs.php fetch)"

site=$1

run_command() {
    
  cd ${CAPTAINCORE_PATH}/data

  # Extract environment
  if [[ "$website" == *"-staging"* ]]; then
    environment=staging
  else
    environment=production
  fi

  # Load site configs
  while read site_configs; do declare "$site_configs"; done <<< "$(captaincore site get $site --bash --captain-id=$CAPTAIN_ID)"

  rclone_config_file="$path/${site}_${site_id}/rclone.conf"

  ftp_output=$( { rclone lsd ${environment}:$home_directory --config="$rclone_config_file" ; } 2>&1 )
  ftp_search_for_wordpress=$( echo "$ftp_output" | perl -wnE'say for /wp-admin/g' )

  if [[ $ftp_search_for_wordpress != "wp-admin" ]]; then
    echo "Error: WordPress not found $site-$environment"
    return
  fi

  wp eval-file ../lib/local-scripts/site-run-updates.php site=$site environment=$environment updates_enabled=$updates_enabled updates_exclude_themes=$updates_exclude_themes updates_exclude_plugins=$updates_exclude_plugins

  if [ -f "${path}/process-${process_id}-progress.log" ]; then
    echo -n "." >> ${path}/process-${process_id}-progress.log
  fi

}

run_command
