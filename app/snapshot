#!/bin/bash

##
##		Creates Snapshot of website
##
## 		Pass arguments from command line like this
##		captaincore snapshot <site> --email=<email> --skip-remote
##

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}/lib/arguments

snapshot_website() {

	if [ $# -gt 0 ]; then

		echo "Generating snapshots for $# sites"
		INDEX=1
		for website in "$@"; do

			domain=`captaincore site get $website --field=domain`

			## Return error if domain not found
			if [[ "$domain" == "" ]]; then
				echo "Can't locate website for site $website"
				return 1
			fi

			if [[ "$website" == *"-staging" ]]; then
				website=${website//-staging/}
				use_staging=true
			fi

			# Generate fresh backup
			captaincore backup $website

			## Generates snapshot archive
			timedate=$(date +%Y-%m-%d)
			cd ~/Backup/
			zip -r $domain-$timedate.zip $domain/ --exclude=$domain/_wpeprivate/\* --exclude=\*.git\* --exclude=$domain/wp-content/advanced-cache.php --exclude=$domain/wp-content/mu-plugins/mu-plugin.php --exclude=$domain/wp-content/mu-plugins/kinsta-mu-plugins.php --exclude=$domain/wp-content/mu-plugins/kinsta-mu-plugins/\* --exclude=$domain/wp-content/mu-plugins/slt-force-strong-passwords.php --exclude=$domain/wp-content/mu-plugins/force-strong-passwords/\* --exclude=$domain/wp-content/mu-plugins/wpengine-common/\*

			## Grab snapshot size in bytes
			if [[ "$OSTYPE" == "linux-gnu" ]]; then
			    ### Begin folder size in bytes without apparent-size flag
			    snapshot_size=`du -s --block-size=1 $path_tmp/$domain-$timedate.zip`
			    snapshot_size=`echo $snapshot_size | cut -d' ' -f 1`

			elif [[ "$OSTYPE" == "darwin"* ]]; then
			    ### Calculate folder size in bytes http://superuser.com/questions/22460/how-do-i-get-the-size-of-a-linux-or-mac-os-x-directory-from-the-command-line
			    snapshot_size=`find $path_tmp/$domain-$timedate.zip -type f -print0 | xargs -0 stat -f%z`
			fi

			if [[ $skip_remote != true ]]; then

				## Moves snapshot to Backblaze archive folder
				rclone move $domain-$timedate.zip $rclone_snapshot/$domain/

				## Post snapshot to ACF field
			  if [[ $captaincore_dev == true ]]; then
					curl -k --data-urlencode "storage=$snapshot_size" --data-urlencode "archive=$domain-$timedate.zip" --data-urlencode "email=$email" --data-urlencode "token=$token" "$captaincore_api/$domain/"
			  else
					curl --data-urlencode "storage=$snapshot_size" --data-urlencode "archive=$domain-$timedate.zip" --data-urlencode "email=$email" --data-urlencode "token=$token" "$captaincore_api/$domain/"
			  fi

			fi

			if [[ $delete_after_snapshot == true ]]; then
				echo "Removing files after snapshot"
				## Removed from rclone
				rclone config delete sftp-$website
				rclone config delete sftp-$website-staging
				## Removes directory from backup server
				rm -rf ~/Backup/$domain
				## Remove from remote storage
				rclone purge --fast-list $rclone_backup/$domain
			fi

			let INDEX=${INDEX}+1

		done

		fi
}

### See if any specific sites are selected
if [ $# -gt 0 ]; then
	## Run snapshots for sites
	snapshot_website $*
else
	# Run snapshots for all sites
	snapshot_website ${websites[@]}
fi
