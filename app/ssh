#!/bin/bash

#
#   SSH wrapper (Supports Kinsta and WP Engine)
#
#   `captaincore ssh`
#
#   [<site>...]
#   One or more sites.
#
#   [--all]
#   All sites.
#
#   [--command=<commands>]
#   Runs command over SSH
#
#   [--script=<name|script>] [--<script-argument-name>=<script-argument-value>]
#   Runs script over SSH
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config

# Loop through arguments and separate regular arguments from flags (--flag)
all_arguments=( $@ )
for var in "$@"; do
  # If starts with "--" then assign it to a flag array
  if [[ $var == --* ]]; then
    count=1+${#flags[*]}
    flags[$count]=$var
    if [[ "$var" == "--script="* ]]; then
      script_position=$(expr 1 + ${#flags[*]})
    fi
    # Else assign to an arguments array
  else
    count=1+${#arguments[*]}
    arguments[$count]=$var
  fi
done

# Loop through flags and assign to variable. A flag "--email=my-email@my-site.com" becomes $email
for i in "${!flags[@]}"; do

  # replace "-" with "_" and remove leading "--"
  flag_name=`echo ${flags[$i]} | cut -c 3-`

  # detected flag contains data
  if [[ $flag_name == *"="* ]]; then
    flag_value=`echo $flag_name | perl -n -e '/.+?=(.+)/&& print $1'` # extract value
    flag_name=`echo $flag_name | perl -n -e '/(.+?)=.+/&& print $1'` # extract name
    flag_name=${flag_name/-/_}
    if [[ $flag_name == "url" ]]; then
      flags[$i]="--url='$flag_value'"
    fi
    declare "$flag_name"="$flag_value" # assigns to $flag_flagname
  else
    # assigns to $flag_flagname boolen
    flag_name=${flag_name//-/_}
    declare "$flag_name"=true
  fi

done

run_command () {

  for website in "$@"; do

    if [[ "$website" == *"-staging" ]]; then
      website=${website//-staging/}
      use_staging=true
    fi

    # Load site configs
    eval $(captaincore site get $website --bash)

    if [[ "$address" == "" && "$captaincore_master" != "" ]]; then
      echo "Site $website not found. Attempting sync with master ($captaincore_master)."
      captaincore utils sync-with-master
      eval $(captaincore site get $website --bash)
    fi

    if [[ "$protocol" == "sftp" ]]; then

      # If website on Kinsta then connect SSH using their format
      if [[ "$address" == *".kinsta.com" ]]; then

        # Kinsta's command prep
        commandprep="cd public/ &&"

        # Kinsta ssh address format
        if [[ "$use_staging" != "true" ]]; then
          remoteserver="-oStrictHostKeyChecking=no $username@$address -p $port"
        else
          remoteserver="-oStrictHostKeyChecking=no $username_staging@$address_staging -p $port_staging"
        fi

        # If not Kinsta then try connecting using WP Engine's format
      elif [[ "$address" == *".wpengine.com" ]]; then

        # WP Engine's command prep
        commandprep="rm ~/.wp-cli/config.yml; cd sites/* &&"

        # WP Engine ssh address format
        remoteserver="-oStrictHostKeyChecking=no $wpe_ssh_user+$site@$site.ssh.wpengine.net"
      else
        echo "$domain website host provider not recognized"
      fi

      # Runs ssh
      if [[ "$commandprep" != "" ]]; then
        if [ -n "$script" ]; then
          # Check for file
          if [ ! -f "$script" ]; then
            # Not found so attempt to run a local script
            script=${root_path}lib/remote-scripts/$script
          fi
          # Pass all arguments found after --script=<script> argument into remote script
          ssh $remoteserver "$commandprep bash -s --" < $script --site=$site ${flags[@]}
        elif [ -n "$command" ]; then
          ssh $remoteserver "$commandprep $command"
        else
          ssh $remoteserver
        fi
      fi

    fi
    ### Clear out variables
    domain=''
    username=''
    password=''
    address=''
    protocol=''
    port=''
    homedir=''
    remoteserver=''
    s3bucket=''
    s3path=''
    subsite=''
    unset use_staging

    let INDEX=${INDEX}+1
  done

}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ]; then
  # Runs on specific sites
  run_command ${arguments[*]}
fi

if [[ $all == "true" ]] && [[ ${#arguments[*]} -eq 0 ]]; then
  # Runs on all sites
  run_command ${websites[@]}
fi

# Error if no sites specifed
if [[ $all != "true" ]] && [ ${#arguments[*]} -eq 0 ]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify one or more sites, or use --all."
fi

# Error if no sites specifed
if [[ $all == "true" ]] && [ ${#arguments[*]} -eq 0 ]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify at least one --command or --script when using --all."
fi
