#!/bin/bash

##
##		Site Monitor Check
##
## 		Usage
##		captaincore monitor <site> [--parallel=<number-of-checks>]
##

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}/lib/arguments

user_agent="captaincore/1.0 (CaptainCore Health Check by CaptaionCore.io)"

monitor_check () {
if [ $# -gt 0 ]; then

	output=()

	for website in "$@"; do

		### Load FTP credentials
		home_url=$(captaincore site get $website --field=home_url)
		if [[ "$home_url" != "" ]]; then
			response=$(curl -A "$user_agent" --write-out %{http_code} --silent --output /dev/null $home_url)
			echo "Response code $response for $home_url"
		else
			echo "Skipping $website, WordPress home url not found"
		fi
		#if [[ "$response" != "200" ]]; then
			# Compares $home_url IP with $address IP. If different then send email showing the difference

			# Adds $domain and $repsonse to new array
			output+="Response code $response for $home_url"
		#fi

		#	#send email
		# output "Response code $response for $address" per each item in array
		#	#echo "$output" | mutt -e 'set content_type=text/html' -s "Monitor: 3 errors" -- support@anchor.host

	done

	# Send 1 email for entire check

fi
}

### See if any specific sites are selected
if [ ${#arguments[*]} -gt 0 ]; then

	# Runs on selective site(s)
	echo "Running monitor check ${#arguments[*]} sites"
	monitor_check ${arguments[*]}

else

	# Runs on all sites
	all_sites=(${websites[@]})

	if [[ "$parallel" -gt "0" ]]; then

		site_count=${#all_sites[*]}
		echo "Running monitor check ${#all_sites[*]} sites"
		parallel_sets=$(($site_count / $parallel))
		for parallel_set in `seq 1 $parallel_sets`; do

			set_needed=$(( $parallel_set *  $parallel ))

			if [[ "$set_needed" -lt "$site_count" ]]; then

				current_parallel=$(($parallel_set * $parallel))
				last_parallel=$(($current_parallel + $parallel - 1))

				for i in `seq $current_parallel $last_parallel`; do
						if [[ "$i" -lt "$site_count" ]]; then
							monitor_check ${all_sites[$i]} &
						fi
				done

				wait

			fi

		done
	else
		echo "Running monitor check ${#all_sites[*]} sites"
		# Runs on all sites
		monitor_check ${websites[@]}
	fi

fi
