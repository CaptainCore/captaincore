#!/usr/bin/env bash

#
#   Grabs Quicksave git commit status log
#
#   `captaincore view-changes <site> --hash=<git_hash>`
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

run_command() {

	for website in "$@"; do

		# Extract environment
		if [[ "$website" == *"-staging"* ]]; then
			environment=staging
		else
			environment=production
		fi


		while read site_configs; do declare "$site_configs"; done <<< "$(captaincore site get $website --bash --captain_id=$captain_id)"

		# Return error if domain not found
		if [[ "$domain" == "" ]] || [[ "$site" == "" ]] || [[ "$provider" == "" ]]; then
			echo "Can't locate website for site $site"
			return 1
		fi

		if [ ! -d "$path/${site}_${site_id}/${environment}/quicksave/" ]; then
			echo -e "Error: Unable to locate Quicksave."
			return
		fi

		cd $path/${site}_${site_id}/${environment}/quicksave/
		git_show=`git show $hash --name-status --format=`
		echo "$git_show"

	done

}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ]; then
  # Runs on specifed sites
  run_command ${arguments[*]}
fi

# Runs on targeted sites
if [ ${#targets[*]} -gt 0 ]; then
  run_command $(captaincore site list ${targets[*]/targets=/@} --captain_id=$captain_id)
fi

# Error if no sites specifed
if [ ${#targets[*]} -eq 0 ] && [ ${#arguments[*]} -eq 0 ]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify one or more sites, or use a target @all, @production or @staging."
fi
