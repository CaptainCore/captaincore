#!/usr/bin/env bash

#
#   Copy production to staging (Kinsta only)
#
#   `captaincore copy-production-to-staging <site> --email=<email>`
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

run_command() {

  echo "Deploying $# staging sites"
  INDEX=1
  for website in "$@"; do

    # Load site configs
    while read site_configs; do declare "$site_configs"; done <<< "$(captaincore site get $website --bash --captain_id=$captain_id)"

    # Vars found, proceed
    if [ -z "$domain" ]; then
      echo "Domain not found"
      return
    fi

    # Define Rclone site name
    rclone_site_name=${captain_id}-${site}

    if [ "$home_directory" != "" ]; then
      home_directory="${home_directory}/"
    fi

    # Unique timestamp
    timestamp=$(date +%s)

    # Grab core version
    core_version=$( captaincore ssh ${site}-production --command="wp core version --skip-plugins --skip-themes" --captain_id=$captain_id )

    # Snapshot everything except uploads
    echo "Generating snapshot of production site."
    captaincore snapshot ${site}-production --notes="Deploy to staging." --filter=database,themes,plugins,everything-else

    # Fetch snapshop id
    cd ${root_path}data
    snapshot_id=$( wp eval-file ../lib/local-scripts/snapshot-list.php site_id=$site_id environment=production limit=1 )

    # Fetch new snapshot
    snapshot_link=$( captaincore snapshot-fetch-link $snapshot_id --captain_id=$captain_id )
    
    # Download production snapshot to staging site and import database
    captaincore ssh ${site}-staging --script=migrate --url="$snapshot_link" --update-urls --captain_id=$captain_id

    if [[ "$migration" == "failed" ]]; then
      echo "Deploy to staging failed."
      continue
    fi

    # Enable search privacy and disable email on staging site
    captaincore ssh ${site}-staging --command="wp option update blog_public 0 --skip-plugins --skip-themes; wp plugin install log-emails --activate --skip-plugins --skip-themes; wp plugin deactivate wp-rocket sendgrid-email-delivery-simplified mailgun login-recaptcha --skip-plugins --skip-themes" --captain_id=$captain_id

    # Install matching core version
    captaincore ssh ${site}-staging --command="wp core update --version=$core_version --skip-plugins --skip-themes" --captain_id=$captain_id

    # Sync uploads folders
    echo "Syncing wp-content/uploads/ from production to staging."
    rclone sync sftp-${rclone_site_name}-production:${home_directory}wp-content/uploads/ sftp-${rclone_site_name}-staging:${home_directory}wp-content/uploads/

    # Post completion to CaptainCore API
    if [[ $captaincore_dev == true ]]; then
      curl_argument="-k"
    fi

    curl ${curl_argument} --request POST "$captaincore_api" --header "Content-Type: application/json" --data @- << EOF
{
"command":"production-to-staging",
"site_id":"$site_id",
"email":"$email",
"token":"$token"
}
EOF

    ### Clear out variables
    domain=''
    username=''
    password=''
    address=''
    protocol=''
    port=''
    username_staging=''
    password_staging=''
    address_staging=''
    protocol_staging=''
    port_staging=''
    preloadusers=''
    home_directory=''
    remoteserver=''
    s3bucket=''
    s3path=''
    subsite=''

    let INDEX=${INDEX}+1
  done

}

# See if any specific sites are selected
if [ ${#arguments[*]} -gt 0 ]; then
  # Deploy sites to staging
  run_command ${arguments[*]}
fi
