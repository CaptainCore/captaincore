#!/usr/bin/env bash

#
#   Sync website data for one or more sites.
#
#   `captaincore sync-data`
#
#   [<site>...]
#   One or more sites.
#
#   [@<target>]
#   Sync website data for all sites with @all.
#
#   [--parallel=<number-of-checks>]
#   Number of syncs at same time
#
#   [--skip-screenshot]
#   Skips screenshot
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

run_command() {

	websites=$@

	# Assign default parallel if needed
  if [[ $parallel == "" ]]; then
    parallel=3
  fi

  if [[ "$skip_screenshot" == "true" ]]; then
    flags="--skip-screenshot"
  fi

  # Generate random auth
  auth=''; for count in {0..6}; do auth+=$(printf "%x" $(($RANDOM%16)) ); done;

  # Begin time tracking
  log_date=$(date +'%Y-%m-%d')
  log_time=$(date +'%H-%M')

  # Define log file format
  log_file=$logs/${log_date}_${log_time}_$auth.txt

  ( echo $websites | xargs -P $parallel -n 1 captaincore sync-data-runner $flags --captain_id=$captain_id ) 2>&1 | tee $log_file

}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ] && [[ $all != "true" ]]; then
  # Runs on specific sites
  run_command ${arguments[*]}
fi

# Runs on targeted sites
if [ ${#targets[*]} -gt 0 ]; then
  run_command $(captaincore site list ${targets[*]/targets=/@} --captain_id=$captain_id)
fi

# Error if no sites specifed
if [ ${#targets[*]} -eq 0 ] && [ ${#arguments[*]} -eq 0 ]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify one or more sites, or use a target @all, @production or @staging."
fi
