#!/usr/bin/env bash

#
#   Snapshots one or more sites.
#
#   `captaincore snapshot`
#
#   [<site>...]
#   One or more sites.
#
#   [@<target>]
#   Target groups of sites like @all @production or @staging.
#
#   [--email=<email>]
#   On completion, send email to
#
#   [--filter=<filter-option>]
#   Filter options include one or more of the following: database, themes, plugins, uploads, everything-else. Example --filter=database,themes,plugins will generate a zip with only the database, themes and plugins. Without filter a snapshot will include everything.
#
#   [--skip-backup]
#   Skips backup and makes snapshot based on local backup
#
#   [--skip-remote]
#   Skips sending to rclone remote
#
#   [--delete-after-snapshot]
#   Deletes local and remote copies of site
#
#   [--notes=<notes>]
#   Add description for the snapshot
#
#   [--user_id=<user_id>]
#   Tracks who made the snapshot
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

run_command() {

  echo "Generating snapshots for $# sites"
  INDEX=1
  for website in "$@"; do

    # Extract environment
    if [[ "$website" == *"-staging"* ]]; then
      environment=staging
    else
      environment=production
    fi

    while read site_configs; do declare "$site_configs"; done <<< "$(captaincore site get $website --bash --captain_id=$captain_id)"

    # Return error if domain not found
    if [[ "$domain" == "" ]] || [[ "$site" == "" ]] || [[ "$provider" == "" ]]; then
      echo "Can't locate website for site $site"
      return 1
    fi

    # Define Rclone site name
    rclone_site_name=${captain_id}-${site}-${environment}

    if [[ "$site" == *"-staging" ]]; then
      site=${site//-staging/}
      use_staging=true
    fi

    if [[ "$skip_backup" != "true" ]]; then
      # Generate fresh backup
      captaincore backup $website --skip-remote --captain_id=$captain_id
    fi

    # Generates snapshot archive
    timedate="$(date +'%Y-%m-%d-%H-%M-%S')-$( php -r 'echo bin2hex(openssl_random_pseudo_bytes( 4 ));' )"
    snapshot_path="$site-$environment-$timedate"
    snapshot_name="$site-$environment-$timedate.zip"
    cd $path/${site}_${site_id}/

    if [[ $delete_after_snapshot == true ]]; then
      cd $path/
      zip --test -q -r $snapshot_name ${site}_${site_id}/ && echo "Completed generating $snapshot_name" || echo "Failed generating $snapshot_name"
      mkdir -p ${site}_${site_id}-$timedate/${environment}/snapshots
      mv $snapshot_name ${environment}/snapshots
      cd ${environment}/snapshots
    fi

    if [[ $delete_after_snapshot != true ]]; then
      ln -s $environment/backup/ $snapshot_path # create directory shortcut for naming purposes

      if [[ "$filter" != "" ]]; then

        # Turn filter in array
        filters=($( echo $filter | tr , " "))

        for option in ${filters[@]}; do

          if [[ $option == "database" ]]; then
            zip -r $snapshot_name $snapshot_path/wp-content/mysql.sql
          fi

          if [[ $option == "themes" ]]; then
            zip --test -q -r $snapshot_name $snapshot_path/wp-content/themes/ && echo "Completed generating $snapshot_name" || echo "Failed generating $snapshot_name"
          fi

          if [[ $option == "plugins" ]]; then
            zip --test -q -r $snapshot_name $snapshot_path/wp-content/plugins/ && echo "Completed generating $snapshot_name" || echo "Failed generating $snapshot_name"
          fi

          if [[ $option == "uploads" ]]; then
            zip --test -q -r $snapshot_name $snapshot_path/wp-content/uploads/ && echo "Completed generating $snapshot_name" || echo "Failed generating $snapshot_name"
          fi

          if [[ $option == "everything-else" ]]; then
            zip --test -q -r $snapshot_name $snapshot_path/ --exclude=$snapshot_path/wp-content/mysql.sql --exclude=$snapshot_path/wp-content/themes/\* --exclude=$snapshot_path/wp-content/plugins/\* --exclude=$snapshot_path/wp-content/uploads/\* --exclude=$snapshot_path/_wpeprivate/\* --exclude=\*.git\* --exclude=$snapshot_path/wp-content/advanced-cache.php --exclude=$snapshot_path/wp-content/mu-plugins/mu-plugin.php --exclude=$snapshot_path/wp-content/mu-plugins/kinsta-mu-plugins.php --exclude=$snapshot_path/wp-content/mu-plugins/kinsta-mu-plugins/\* --exclude=$snapshot_path/wp-content/mu-plugins/slt-force-strong-passwords.php --exclude=$snapshot_path/wp-content/mu-plugins/force-strong-passwords/\* --exclude=$snapshot_path/wp-content/mu-plugins/wpengine-common/\* && echo "Completed generating $snapshot_name" || echo "Failed generating $snapshot_name"
          fi

        done

      fi

      if [[ "$filter" == "" ]]; then
      
        # Add everything to ZIP
        zip --test -q -r $snapshot_name $snapshot_path/ --exclude=$snapshot_path/_wpeprivate/\* --exclude=\*.git\* --exclude=$snapshot_path/wp-content/advanced-cache.php --exclude=$snapshot_path/wp-content/mu-plugins/mu-plugin.php --exclude=$snapshot_path/wp-content/mu-plugins/kinsta-mu-plugins.php --exclude=$snapshot_path/wp-content/mu-plugins/kinsta-mu-plugins/\* --exclude=$snapshot_path/wp-content/mu-plugins/slt-force-strong-passwords.php --exclude=$snapshot_path/wp-content/mu-plugins/force-strong-passwords/\* --exclude=$snapshot_path/wp-content/mu-plugins/wpengine-common/\*
      fi
      
      rm $snapshot_path  # remove directory shortcut
      mkdir -p ${environment}/snapshots
      mv $snapshot_name ${environment}/snapshots
      cd ${environment}/snapshots
    fi

    # Grab snapshot size in bytes
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
      # Begin folder size in bytes without apparent-size flag
      snapshot_size=`du -s --block-size=1 $snapshot_name`
      snapshot_size=`echo $snapshot_size | cut -d' ' -f 1`

    elif [[ "$OSTYPE" == "darwin"* ]]; then
      # Calculate folder size in bytes http://superuser.com/questions/22460/how-do-i-get-the-size-of-a-linux-or-mac-os-x-directory-from-the-command-line
      snapshot_size=`find $snapshot_name -type f -print0 | xargs -0 stat -f%z`
    fi

    if [[ $skip_remote != true ]]; then

      # Moves snapshot to Backblaze archive folder
      rclone move $snapshot_name $rclone_snapshot/${site}_${site_id}/

      if [[ "$debug" == "true" ]]; then
			read -r -d '' VAR << EOM
{
"command":"snapshot",
"user_id":"$user_id",
"site_id":"$site_id",
"environment":"$environment",
"storage":"$snapshot_size",
"archive":"${site}-${environment}-${timedate}.zip",
"email":"$email",
"notes":"$notes",
"token":"$token"
}
EOM
			echo $VAR
			continue
		fi

      # Post snapshot to ACF field
      if [[ "$captaincore_dev" == true ]]; then
        curl_argument="-k"
      fi

      # Adds sync data to CaptainCore GUI
      curl ${curl_argument} --fail --silent --show-error --request POST "$captaincore_api" --header "Content-Type: application/json" --data @- << EOF
{
"command":"snapshot",
"user_id":"$user_id",
"site_id":"$site_id",
"environment":"$environment",
"storage":"$snapshot_size",
"archive":"${site}-${environment}-${timedate}.zip",
"email":"$email",
"notes":"$notes",
"token":"$token"
}
EOF

    fi

    if [[ $delete_after_snapshot == true ]]; then

      echo "Removing files after snapshot"

      # Removed from rclone
      rclone config delete sftp-${rclone_site_name}-production
      rclone config delete sftp-${rclone_site_name}-staging

      # Removes directory from backup server
      rm -rf $path/${site}_${site_id}/

      # Remove from remote storage
      rclone purge --fast-list $rclone_backup/${site}_${site_id}

    fi

    let INDEX=${INDEX}+1

  done

}

# See if any sites are specifed
if [ ${#arguments[*]} -gt 0 ]; then
  # Runs on specifed sites
  run_command ${arguments[*]}
fi

# Runs on targeted sites
if [ ${#targets[*]} -gt 0 ]; then
  run_command $(captaincore site list ${targets[*]/targets=/@} --captain_id=$captain_id)
fi

# Error if no sites specifed
if [ ${#targets[*]} -eq 0 ] && [ ${#arguments[*]} -eq 0 ]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify one or more sites, or use a target @all, @production or @staging."
fi