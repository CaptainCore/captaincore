#!/bin/bash

#
#   Monitor check
#
#   `captaincore monitor`
#
#   [<site>...]
#   One or more sites to check.
#
#   [--all]
#   Checks all sites.
#
#   [--parallel=<number-of-checks>]
#   Number of moniter checks to run at same time. Defaults to 20.
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}config
source ${root_path}lib/arguments

run_command () {

  # Default parallel to 20
  if [[ $parallel == "" ]]; then
    parallel=20
  fi

  # See if any sites are specifed
  if [ ${#arguments[*]} -gt 0 ]; then
		sites=()
    # Runs on specific sites
		for site in ${arguments[*]}; do
			sites+=( $( captaincore site get $site --field=home_url ) )
		done
		sites=${sites[@]}
  fi

  if [[ $all == "true" ]]; then
    # Runs on all sites
    sites=$(captaincore site list --field=home_url)
  fi

  # Error if no sites specifed
  if [[ $all != "true" ]] && [ ${#arguments[*]} -eq 0 ]; then
    echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify one or more sites, or use --all."
    return 1
  fi

	# Generate random auth
	auth=''; for count in {0..6}; do auth+=$(printf "%x" $(($RANDOM%16)) ); done;

	# Begin time tracking
	overalltimebegin=$(date +"%s")
	backup_date=$(date +'%Y-%m-%d')
	backup_time=$(date +'%H-%M')

	# Define log file format
	log_file=$logs/${backup_date}_${backup_time}_$auth.txt
	echo "logging to $log_file"

  # Run all checks in parallel. Collect the results in log file.
  ( echo $sites | xargs -P $parallel -n 1 captaincore monitor-check ) 2>&1 | tee $log_file

  echo "Finished checks now building email if needed"

	#
	cd ${root_path}data
	error_count=$(wp eval-file ${root_path}lib/php/monitor-error-count.php $log_file)

	# Send email if needed
	if [[ $error_count != "0" ]]; then

		# Build emails
		email_content=$(wp eval-file ${root_path}lib/php/monitor-generate-email.php $log_file)

		echo "Sending Email"

		# output "Response code $response for $address" per each item in array
		echo $email_content | mutt -e 'set content_type=text/html' -s "Monitor: $error_count errors" -- $captaincore_admin_email

	fi

	return 1

}

run_command_old () {

  for website in "$@"; do

    # Load site configs
    eval $(captaincore site get $website --bash)

    # Bail if home url not defined
    if [[ "$home_url" == "" ]]; then
      echo "Skipping $website, WordPress home url not found"
      warnings+=("Skipping $website, WordPress home url not found")
      continue
    fi

    # Run the health check. Return http_code and body.
    response=$(curl -A "$user_agent" --write-out %{http_code} --max-time 30 --silent $home_url)

    # Pull out http code
    http_code=${response:${#response}-3}

    # Pull out body
    body=${response:0:${#response}-3}

    # valid body contains </html>
    html_end_tag=$(echo $body | perl -wnE'say for /<\/html>/g')

    # check if </html> found
    if [[ $html_end_tag == "</html>" ]]; then
      html_end_tag_check="true"
    else
      html_end_tag_check="false"
    fi

    if [[ $json == "true" ]]; then

      # Build json for output
      read -r -d '' json_output << EOM
{
"http_code":"$http_code",
"url":"$home_url",
"site_id":"$site_id",
"html_valid":"$html_end_tag_check"
}
EOM
      echo $json_output
      continue

    fi

    echo "Response code $http_code for $home_url"

    # Was healthy and still is, proceed without new health log
    if [[ "$healthly" == "true" ]] && [[ $http_code == "200" ]]; then

      continue
    fi

    # Just became healthy. Update status and mark new health
    if [[ $http_code == "200" ]]; then

      continue
    fi

    # Handle redirects
    if [[ $http_code == "301" ]]; then
      warnings+=("Response code $http_code for $home_url")
      continue
    fi

    if [[ "$http_code" != "200" ]]; then
      # Compares $home_url IP with $address IP. If different then send email showing the difference
      # Adds $domain and $repsonse to new array
      echo "found error, send an email"
      send_email="true"
    fi

    # Append error to errors for email purposes
    errors+=("Response code $http_code for $home_url")

  done

}
run_command
