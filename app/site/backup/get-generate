#!/usr/bin/env bash

#
#   Fetches backups for a site
#
#   `captaincore site backup get-generate <site> <backup-id>`
#

# Load configuration
root_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; root_path=${root_path%app*}
source ${root_path}lib/arguments

# See if any sites are specifed
if [ ${#arguments[*]} -eq 0 ]; then
  echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Please specify <site> and <backup-id>."
  exit 1
fi

site=$1
backup_id=$2

# Extract environment
if [[ "$site" == *"-staging"* ]]; then
    environment=staging
fi

if [[ "$site" == *"-production"* ]]; then
    environment=production
fi

if [[ "$site" != *"-"* ]]; then
    environment=production
fi

# Load site configs
while read site_configs; do if [[ $site_configs == "" ]]; then continue; fi; declare "$site_configs"; done <<< "$(captaincore site get $site --bash --captain_id=$captain_id)"

cd ${root_path}data

if [[ "$backup_id" == "" ]] || [[ "$backup_id" == *"--"* ]]; then
    backup_id=$( wp eval-file ${root_path}lib/local-scripts/backups-get-latest.php site=$site site_id=$site_id environment=$environment captain_id=$captain_id )
    echo "Backup id not selected. Generating response for latest ID $backup_id"
fi

if [[ $( restic snapshots --repo rclone:$rclone_backup/${site}_${site_id}/${environment}/restic-repo ) == "" ]]; then
    echo -e "${COLOR_RED}Error:${COLOR_NORMAL} Backup repo not found."
    exit 1
fi

backup_snapshot="$path/${site}_${site_id}/${environment}/backups/snapshot-${backup_id}.json"
wp eval-file ${root_path}lib/local-scripts/backups-get.php backup_id=$backup_id site=$site site_id=$site_id environment=$environment captain_id=$captain_id > $backup_snapshot